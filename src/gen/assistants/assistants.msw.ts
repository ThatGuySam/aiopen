/* eslint-disable ts/explicit-function-return-type */

import type {
  AssistantObject,
  AssistantsNamedToolChoice,
  AssistantToolsCode,
  AssistantToolsFileSearch,
  AssistantToolsFileSearchTypeOnly,
  AssistantToolsFunction,
  DeleteAssistantResponse,
  DeleteMessageResponse,
  DeleteThreadResponse,
  ListAssistantsResponse,
  ListMessagesResponse,
  ListRunsResponse,
  ListRunStepsResponse,
  MessageContentImageFileObject,
  MessageContentImageUrlObject,
  MessageContentRefusalObject,
  MessageContentTextAnnotationsFileCitationObject,
  MessageContentTextAnnotationsFilePathObject,
  MessageContentTextObject,
  MessageObject,
  ResponseFormatJsonObject,
  ResponseFormatJsonSchema,
  ResponseFormatText,
  RunObject,
  RunStepDetailsMessageCreationObject,
  RunStepDetailsToolCallsCodeObject,
  RunStepDetailsToolCallsCodeOutputImageObject,
  RunStepDetailsToolCallsCodeOutputLogsObject,
  RunStepDetailsToolCallsFileSearchObject,
  RunStepDetailsToolCallsFunctionObject,
  RunStepDetailsToolCallsObject,
  RunStepObject,
  ThreadObject,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getListAssistantsResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getListAssistantsResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getListAssistantsResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getListAssistantsResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getListAssistantsResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getListAssistantsResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getListAssistantsResponseMock(overrideResponse: Partial< ListAssistantsResponse > = {}): ListAssistantsResponse {
  return { object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['assistant'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), description: faker.helpers.arrayElement([faker.string.alpha(20), null]), model: faker.string.alpha(20), instructions: faker.helpers.arrayElement([faker.string.alpha(20), null]), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListAssistantsResponseAssistantToolsCodeMock() }, { ...getListAssistantsResponseAssistantToolsFileSearchMock() }, { ...getListAssistantsResponseAssistantToolsFunctionMock() }]))), tool_resources: faker.helpers.arrayElement([{ code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, undefined]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 2 }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 1 }), null]), undefined]), response_format: faker.helpers.arrayElement([{ ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getListAssistantsResponseResponseFormatTextMock() }, { ...getListAssistantsResponseResponseFormatJsonObjectMock() }, { ...getListAssistantsResponseResponseFormatJsonSchemaMock() }]) }, undefined]) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse }
}

export const getCreateAssistantResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getCreateAssistantResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getCreateAssistantResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getCreateAssistantResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getCreateAssistantResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getCreateAssistantResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getCreateAssistantResponseMock(overrideResponse: Partial< AssistantObject > = {}): AssistantObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['assistant'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), description: faker.helpers.arrayElement([faker.string.alpha(20), null]), model: faker.string.alpha(20), instructions: faker.helpers.arrayElement([faker.string.alpha(20), null]), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateAssistantResponseAssistantToolsCodeMock() }, { ...getCreateAssistantResponseAssistantToolsFileSearchMock() }, { ...getCreateAssistantResponseAssistantToolsFunctionMock() }]))), tool_resources: faker.helpers.arrayElement([{ code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, undefined]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 2 }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 1 }), null]), undefined]), response_format: faker.helpers.arrayElement([{ ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getCreateAssistantResponseResponseFormatTextMock() }, { ...getCreateAssistantResponseResponseFormatJsonObjectMock() }, { ...getCreateAssistantResponseResponseFormatJsonSchemaMock() }]) }, undefined]), ...overrideResponse }
}

export const getGetAssistantResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getGetAssistantResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getGetAssistantResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getGetAssistantResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getGetAssistantResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getGetAssistantResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getGetAssistantResponseMock(overrideResponse: Partial< AssistantObject > = {}): AssistantObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['assistant'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), description: faker.helpers.arrayElement([faker.string.alpha(20), null]), model: faker.string.alpha(20), instructions: faker.helpers.arrayElement([faker.string.alpha(20), null]), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetAssistantResponseAssistantToolsCodeMock() }, { ...getGetAssistantResponseAssistantToolsFileSearchMock() }, { ...getGetAssistantResponseAssistantToolsFunctionMock() }]))), tool_resources: faker.helpers.arrayElement([{ code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, undefined]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 2 }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 1 }), null]), undefined]), response_format: faker.helpers.arrayElement([{ ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getGetAssistantResponseResponseFormatTextMock() }, { ...getGetAssistantResponseResponseFormatJsonObjectMock() }, { ...getGetAssistantResponseResponseFormatJsonSchemaMock() }]) }, undefined]), ...overrideResponse }
}

export const getModifyAssistantResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getModifyAssistantResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getModifyAssistantResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getModifyAssistantResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getModifyAssistantResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getModifyAssistantResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getModifyAssistantResponseMock(overrideResponse: Partial< AssistantObject > = {}): AssistantObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['assistant'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), description: faker.helpers.arrayElement([faker.string.alpha(20), null]), model: faker.string.alpha(20), instructions: faker.helpers.arrayElement([faker.string.alpha(20), null]), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getModifyAssistantResponseAssistantToolsCodeMock() }, { ...getModifyAssistantResponseAssistantToolsFileSearchMock() }, { ...getModifyAssistantResponseAssistantToolsFunctionMock() }]))), tool_resources: faker.helpers.arrayElement([{ code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, undefined]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 2 }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 0, max: 1 }), null]), undefined]), response_format: faker.helpers.arrayElement([{ ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getModifyAssistantResponseResponseFormatTextMock() }, { ...getModifyAssistantResponseResponseFormatJsonObjectMock() }, { ...getModifyAssistantResponseResponseFormatJsonSchemaMock() }]) }, undefined]), ...overrideResponse }
}

export const getDeleteAssistantResponseMock = (overrideResponse: Partial< DeleteAssistantResponse > = {}): DeleteAssistantResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.helpers.arrayElement(['assistant.deleted'] as const), ...overrideResponse })

export function getCreateThreadResponseMock(overrideResponse: Partial< ThreadObject > = {}): ThreadObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), tool_resources: { code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getCreateThreadAndRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getCreateThreadAndRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getCreateThreadAndRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getCreateThreadAndRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getCreateThreadAndRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getCreateThreadAndRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getCreateThreadAndRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getCreateThreadAndRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateThreadAndRunResponseAssistantToolsCodeMock() }, { ...getCreateThreadAndRunResponseAssistantToolsFileSearchMock() }, { ...getCreateThreadAndRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getCreateThreadAndRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getCreateThreadAndRunResponseResponseFormatTextMock() }, { ...getCreateThreadAndRunResponseResponseFormatJsonObjectMock() }, { ...getCreateThreadAndRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export function getGetThreadResponseMock(overrideResponse: Partial< ThreadObject > = {}): ThreadObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), tool_resources: { code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export function getModifyThreadResponseMock(overrideResponse: Partial< ThreadObject > = {}): ThreadObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), tool_resources: { code_interpreter: faker.helpers.arrayElement([{ file_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]), file_search: faker.helpers.arrayElement([{ vector_store_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]) }, undefined]) }, metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getDeleteThreadResponseMock = (overrideResponse: Partial< DeleteThreadResponse > = {}): DeleteThreadResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.helpers.arrayElement(['thread.deleted'] as const), ...overrideResponse })

export const getListMessagesResponseMessageContentImageFileObjectMock = (overrideResponse: Partial<MessageContentImageFileObject> = {}): MessageContentImageFileObject => ({ ...{ type: faker.helpers.arrayElement(['image_file'] as const), image_file: { file_id: faker.string.alpha(20), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getListMessagesResponseMessageContentImageUrlObjectMock = (overrideResponse: Partial<MessageContentImageUrlObject> = {}): MessageContentImageUrlObject => ({ ...{ type: faker.helpers.arrayElement(['image_url'] as const), image_url: { url: faker.internet.url(), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getListMessagesResponseMessageContentTextAnnotationsFileCitationObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFileCitationObject> = {}): MessageContentTextAnnotationsFileCitationObject => ({ ...{ type: faker.helpers.arrayElement(['file_citation'] as const), text: faker.string.alpha(20), file_citation: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getListMessagesResponseMessageContentTextAnnotationsFilePathObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFilePathObject> = {}): MessageContentTextAnnotationsFilePathObject => ({ ...{ type: faker.helpers.arrayElement(['file_path'] as const), text: faker.string.alpha(20), file_path: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getListMessagesResponseMessageContentTextObjectMock = (overrideResponse: Partial<MessageContentTextObject> = {}): MessageContentTextObject => ({ ...{ type: faker.helpers.arrayElement(['text'] as const), text: { value: faker.string.alpha(20), annotations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListMessagesResponseMessageContentTextAnnotationsFileCitationObjectMock() }, { ...getListMessagesResponseMessageContentTextAnnotationsFilePathObjectMock() }]))) } }, ...overrideResponse })

export const getListMessagesResponseMessageContentRefusalObjectMock = (overrideResponse: Partial<MessageContentRefusalObject> = {}): MessageContentRefusalObject => ({ ...{ type: faker.helpers.arrayElement(['refusal'] as const), refusal: faker.string.alpha(20) }, ...overrideResponse })

export const getListMessagesResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getListMessagesResponseAssistantToolsFileSearchTypeOnlyMock = (overrideResponse: Partial<AssistantToolsFileSearchTypeOnly> = {}): AssistantToolsFileSearchTypeOnly => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const) }, ...overrideResponse })

export function getListMessagesResponseMock(overrideResponse: Partial< ListMessagesResponse > = {}): ListMessagesResponse {
  return { object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.message'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'incomplete', 'completed'] as const), incomplete_details: { reason: faker.helpers.arrayElement(['content_filter', 'max_tokens', 'run_cancelled', 'run_expired', 'run_failed'] as const) }, completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), role: faker.helpers.arrayElement(['user', 'assistant'] as const), content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListMessagesResponseMessageContentImageFileObjectMock() }, { ...getListMessagesResponseMessageContentImageUrlObjectMock() }, { ...getListMessagesResponseMessageContentTextObjectMock() }, { ...getListMessagesResponseMessageContentRefusalObjectMock() }]))), assistant_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), run_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), attachments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tools: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListMessagesResponseAssistantToolsCodeMock() }, { ...getListMessagesResponseAssistantToolsFileSearchTypeOnlyMock() }]))), undefined]) })), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  } })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse }
}

export const getCreateMessageResponseMessageContentImageFileObjectMock = (overrideResponse: Partial<MessageContentImageFileObject> = {}): MessageContentImageFileObject => ({ ...{ type: faker.helpers.arrayElement(['image_file'] as const), image_file: { file_id: faker.string.alpha(20), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getCreateMessageResponseMessageContentImageUrlObjectMock = (overrideResponse: Partial<MessageContentImageUrlObject> = {}): MessageContentImageUrlObject => ({ ...{ type: faker.helpers.arrayElement(['image_url'] as const), image_url: { url: faker.internet.url(), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getCreateMessageResponseMessageContentTextAnnotationsFileCitationObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFileCitationObject> = {}): MessageContentTextAnnotationsFileCitationObject => ({ ...{ type: faker.helpers.arrayElement(['file_citation'] as const), text: faker.string.alpha(20), file_citation: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getCreateMessageResponseMessageContentTextAnnotationsFilePathObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFilePathObject> = {}): MessageContentTextAnnotationsFilePathObject => ({ ...{ type: faker.helpers.arrayElement(['file_path'] as const), text: faker.string.alpha(20), file_path: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getCreateMessageResponseMessageContentTextObjectMock = (overrideResponse: Partial<MessageContentTextObject> = {}): MessageContentTextObject => ({ ...{ type: faker.helpers.arrayElement(['text'] as const), text: { value: faker.string.alpha(20), annotations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateMessageResponseMessageContentTextAnnotationsFileCitationObjectMock() }, { ...getCreateMessageResponseMessageContentTextAnnotationsFilePathObjectMock() }]))) } }, ...overrideResponse })

export const getCreateMessageResponseMessageContentRefusalObjectMock = (overrideResponse: Partial<MessageContentRefusalObject> = {}): MessageContentRefusalObject => ({ ...{ type: faker.helpers.arrayElement(['refusal'] as const), refusal: faker.string.alpha(20) }, ...overrideResponse })

export const getCreateMessageResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getCreateMessageResponseAssistantToolsFileSearchTypeOnlyMock = (overrideResponse: Partial<AssistantToolsFileSearchTypeOnly> = {}): AssistantToolsFileSearchTypeOnly => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const) }, ...overrideResponse })

export function getCreateMessageResponseMock(overrideResponse: Partial< MessageObject > = {}): MessageObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.message'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'incomplete', 'completed'] as const), incomplete_details: { reason: faker.helpers.arrayElement(['content_filter', 'max_tokens', 'run_cancelled', 'run_expired', 'run_failed'] as const) }, completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), role: faker.helpers.arrayElement(['user', 'assistant'] as const), content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateMessageResponseMessageContentImageFileObjectMock() }, { ...getCreateMessageResponseMessageContentImageUrlObjectMock() }, { ...getCreateMessageResponseMessageContentTextObjectMock() }, { ...getCreateMessageResponseMessageContentRefusalObjectMock() }]))), assistant_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), run_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), attachments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tools: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateMessageResponseAssistantToolsCodeMock() }, { ...getCreateMessageResponseAssistantToolsFileSearchTypeOnlyMock() }]))), undefined]) })), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getGetMessageResponseMessageContentImageFileObjectMock = (overrideResponse: Partial<MessageContentImageFileObject> = {}): MessageContentImageFileObject => ({ ...{ type: faker.helpers.arrayElement(['image_file'] as const), image_file: { file_id: faker.string.alpha(20), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getGetMessageResponseMessageContentImageUrlObjectMock = (overrideResponse: Partial<MessageContentImageUrlObject> = {}): MessageContentImageUrlObject => ({ ...{ type: faker.helpers.arrayElement(['image_url'] as const), image_url: { url: faker.internet.url(), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getGetMessageResponseMessageContentTextAnnotationsFileCitationObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFileCitationObject> = {}): MessageContentTextAnnotationsFileCitationObject => ({ ...{ type: faker.helpers.arrayElement(['file_citation'] as const), text: faker.string.alpha(20), file_citation: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getGetMessageResponseMessageContentTextAnnotationsFilePathObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFilePathObject> = {}): MessageContentTextAnnotationsFilePathObject => ({ ...{ type: faker.helpers.arrayElement(['file_path'] as const), text: faker.string.alpha(20), file_path: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getGetMessageResponseMessageContentTextObjectMock = (overrideResponse: Partial<MessageContentTextObject> = {}): MessageContentTextObject => ({ ...{ type: faker.helpers.arrayElement(['text'] as const), text: { value: faker.string.alpha(20), annotations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetMessageResponseMessageContentTextAnnotationsFileCitationObjectMock() }, { ...getGetMessageResponseMessageContentTextAnnotationsFilePathObjectMock() }]))) } }, ...overrideResponse })

export const getGetMessageResponseMessageContentRefusalObjectMock = (overrideResponse: Partial<MessageContentRefusalObject> = {}): MessageContentRefusalObject => ({ ...{ type: faker.helpers.arrayElement(['refusal'] as const), refusal: faker.string.alpha(20) }, ...overrideResponse })

export const getGetMessageResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getGetMessageResponseAssistantToolsFileSearchTypeOnlyMock = (overrideResponse: Partial<AssistantToolsFileSearchTypeOnly> = {}): AssistantToolsFileSearchTypeOnly => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const) }, ...overrideResponse })

export function getGetMessageResponseMock(overrideResponse: Partial< MessageObject > = {}): MessageObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.message'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'incomplete', 'completed'] as const), incomplete_details: { reason: faker.helpers.arrayElement(['content_filter', 'max_tokens', 'run_cancelled', 'run_expired', 'run_failed'] as const) }, completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), role: faker.helpers.arrayElement(['user', 'assistant'] as const), content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetMessageResponseMessageContentImageFileObjectMock() }, { ...getGetMessageResponseMessageContentImageUrlObjectMock() }, { ...getGetMessageResponseMessageContentTextObjectMock() }, { ...getGetMessageResponseMessageContentRefusalObjectMock() }]))), assistant_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), run_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), attachments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tools: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetMessageResponseAssistantToolsCodeMock() }, { ...getGetMessageResponseAssistantToolsFileSearchTypeOnlyMock() }]))), undefined]) })), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getModifyMessageResponseMessageContentImageFileObjectMock = (overrideResponse: Partial<MessageContentImageFileObject> = {}): MessageContentImageFileObject => ({ ...{ type: faker.helpers.arrayElement(['image_file'] as const), image_file: { file_id: faker.string.alpha(20), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getModifyMessageResponseMessageContentImageUrlObjectMock = (overrideResponse: Partial<MessageContentImageUrlObject> = {}): MessageContentImageUrlObject => ({ ...{ type: faker.helpers.arrayElement(['image_url'] as const), image_url: { url: faker.internet.url(), detail: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'low', 'high'] as const), undefined]) } }, ...overrideResponse })

export const getModifyMessageResponseMessageContentTextAnnotationsFileCitationObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFileCitationObject> = {}): MessageContentTextAnnotationsFileCitationObject => ({ ...{ type: faker.helpers.arrayElement(['file_citation'] as const), text: faker.string.alpha(20), file_citation: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getModifyMessageResponseMessageContentTextAnnotationsFilePathObjectMock = (overrideResponse: Partial<MessageContentTextAnnotationsFilePathObject> = {}): MessageContentTextAnnotationsFilePathObject => ({ ...{ type: faker.helpers.arrayElement(['file_path'] as const), text: faker.string.alpha(20), file_path: { file_id: faker.string.alpha(20) }, start_index: faker.number.int({ min: 0, max: undefined }), end_index: faker.number.int({ min: 0, max: undefined }) }, ...overrideResponse })

export const getModifyMessageResponseMessageContentTextObjectMock = (overrideResponse: Partial<MessageContentTextObject> = {}): MessageContentTextObject => ({ ...{ type: faker.helpers.arrayElement(['text'] as const), text: { value: faker.string.alpha(20), annotations: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getModifyMessageResponseMessageContentTextAnnotationsFileCitationObjectMock() }, { ...getModifyMessageResponseMessageContentTextAnnotationsFilePathObjectMock() }]))) } }, ...overrideResponse })

export const getModifyMessageResponseMessageContentRefusalObjectMock = (overrideResponse: Partial<MessageContentRefusalObject> = {}): MessageContentRefusalObject => ({ ...{ type: faker.helpers.arrayElement(['refusal'] as const), refusal: faker.string.alpha(20) }, ...overrideResponse })

export const getModifyMessageResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getModifyMessageResponseAssistantToolsFileSearchTypeOnlyMock = (overrideResponse: Partial<AssistantToolsFileSearchTypeOnly> = {}): AssistantToolsFileSearchTypeOnly => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const) }, ...overrideResponse })

export function getModifyMessageResponseMock(overrideResponse: Partial< MessageObject > = {}): MessageObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.message'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'incomplete', 'completed'] as const), incomplete_details: { reason: faker.helpers.arrayElement(['content_filter', 'max_tokens', 'run_cancelled', 'run_expired', 'run_failed'] as const) }, completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), role: faker.helpers.arrayElement(['user', 'assistant'] as const), content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getModifyMessageResponseMessageContentImageFileObjectMock() }, { ...getModifyMessageResponseMessageContentImageUrlObjectMock() }, { ...getModifyMessageResponseMessageContentTextObjectMock() }, { ...getModifyMessageResponseMessageContentRefusalObjectMock() }]))), assistant_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), run_id: faker.helpers.arrayElement([faker.string.alpha(20), null]), attachments: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tools: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getModifyMessageResponseAssistantToolsCodeMock() }, { ...getModifyMessageResponseAssistantToolsFileSearchTypeOnlyMock() }]))), undefined]) })), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getDeleteMessageResponseMock = (overrideResponse: Partial< DeleteMessageResponse > = {}): DeleteMessageResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.helpers.arrayElement(['thread.message.deleted'] as const), ...overrideResponse })

export const getListRunsResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getListRunsResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getListRunsResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getListRunsResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getListRunsResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getListRunsResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getListRunsResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getListRunsResponseMock(overrideResponse: Partial< ListRunsResponse > = {}): ListRunsResponse {
  return { object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListRunsResponseAssistantToolsCodeMock() }, { ...getListRunsResponseAssistantToolsFileSearchMock() }, { ...getListRunsResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getListRunsResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getListRunsResponseResponseFormatTextMock() }, { ...getListRunsResponseResponseFormatJsonObjectMock() }, { ...getListRunsResponseResponseFormatJsonSchemaMock() }]) } })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse }
}

export const getCreateRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getCreateRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getCreateRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getCreateRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getCreateRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getCreateRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getCreateRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getCreateRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCreateRunResponseAssistantToolsCodeMock() }, { ...getCreateRunResponseAssistantToolsFileSearchMock() }, { ...getCreateRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getCreateRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getCreateRunResponseResponseFormatTextMock() }, { ...getCreateRunResponseResponseFormatJsonObjectMock() }, { ...getCreateRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export const getGetRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getGetRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getGetRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getGetRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getGetRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getGetRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getGetRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getGetRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetRunResponseAssistantToolsCodeMock() }, { ...getGetRunResponseAssistantToolsFileSearchMock() }, { ...getGetRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getGetRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getGetRunResponseResponseFormatTextMock() }, { ...getGetRunResponseResponseFormatJsonObjectMock() }, { ...getGetRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export const getModifyRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getModifyRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getModifyRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getModifyRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getModifyRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getModifyRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getModifyRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getModifyRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getModifyRunResponseAssistantToolsCodeMock() }, { ...getModifyRunResponseAssistantToolsFileSearchMock() }, { ...getModifyRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getModifyRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getModifyRunResponseResponseFormatTextMock() }, { ...getModifyRunResponseResponseFormatJsonObjectMock() }, { ...getModifyRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export const getCancelRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getCancelRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getCancelRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getCancelRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getCancelRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getCancelRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getCancelRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getCancelRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getCancelRunResponseAssistantToolsCodeMock() }, { ...getCancelRunResponseAssistantToolsFileSearchMock() }, { ...getCancelRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getCancelRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getCancelRunResponseResponseFormatTextMock() }, { ...getCancelRunResponseResponseFormatJsonObjectMock() }, { ...getCancelRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export const getListRunStepsResponseRunStepDetailsMessageCreationObjectMock = (overrideResponse: Partial<RunStepDetailsMessageCreationObject> = {}): RunStepDetailsMessageCreationObject => ({ ...{ type: faker.helpers.arrayElement(['message_creation'] as const), message_creation: { message_id: faker.string.alpha(20) } }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsCodeOutputLogsObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeOutputLogsObject> = {}): RunStepDetailsToolCallsCodeOutputLogsObject => ({ ...{ type: faker.helpers.arrayElement(['logs'] as const), logs: faker.string.alpha(20) }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsCodeOutputImageObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeOutputImageObject> = {}): RunStepDetailsToolCallsCodeOutputImageObject => ({ ...{ type: faker.helpers.arrayElement(['image'] as const), image: { file_id: faker.string.alpha(20) } }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsCodeObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeObject> = {}): RunStepDetailsToolCallsCodeObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['code_interpreter'] as const), code_interpreter: { input: faker.string.alpha(20), outputs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListRunStepsResponseRunStepDetailsToolCallsCodeOutputLogsObjectMock() }, { ...getListRunStepsResponseRunStepDetailsToolCallsCodeOutputImageObjectMock() }]))) } }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsFileSearchObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsFileSearchObject> = {}): RunStepDetailsToolCallsFileSearchObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['file_search'] as const), file_search: { ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement(['default_2024_08_21'] as const), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.string.alpha(20), file_name: faker.string.alpha(20), score: faker.number.int({ min: 0, max: 1 }), content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ type: faker.helpers.arrayElement([faker.helpers.arrayElement(['text'] as const), undefined]), text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), undefined]) })), undefined]) } }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsFunctionObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsFunctionObject> = {}): RunStepDetailsToolCallsFunctionObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20), output: faker.helpers.arrayElement([faker.string.alpha(20), null]) } }, ...overrideResponse })

export const getListRunStepsResponseRunStepDetailsToolCallsObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsObject> = {}): RunStepDetailsToolCallsObject => ({ ...{ type: faker.helpers.arrayElement(['tool_calls'] as const), tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getListRunStepsResponseRunStepDetailsToolCallsCodeObjectMock() }, { ...getListRunStepsResponseRunStepDetailsToolCallsFileSearchObjectMock() }, { ...getListRunStepsResponseRunStepDetailsToolCallsFunctionObjectMock() }]))) }, ...overrideResponse })

export function getListRunStepsResponseMock(overrideResponse: Partial< ListRunStepsResponse > = {}): ListRunStepsResponse {
  return { object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run.step'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), assistant_id: faker.string.alpha(20), thread_id: faker.string.alpha(20), run_id: faker.string.alpha(20), type: faker.helpers.arrayElement(['message_creation', 'tool_calls'] as const), status: faker.helpers.arrayElement(['in_progress', 'cancelled', 'failed', 'completed', 'expired'] as const), step_details: faker.helpers.arrayElement([{ ...getListRunStepsResponseRunStepDetailsMessageCreationObjectMock() }, { ...getListRunStepsResponseRunStepDetailsToolCallsObjectMock() }]), last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded'] as const), message: faker.string.alpha(20) }, expired_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) } })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse }
}

export const getGetRunStepResponseRunStepDetailsMessageCreationObjectMock = (overrideResponse: Partial<RunStepDetailsMessageCreationObject> = {}): RunStepDetailsMessageCreationObject => ({ ...{ type: faker.helpers.arrayElement(['message_creation'] as const), message_creation: { message_id: faker.string.alpha(20) } }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsCodeOutputLogsObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeOutputLogsObject> = {}): RunStepDetailsToolCallsCodeOutputLogsObject => ({ ...{ type: faker.helpers.arrayElement(['logs'] as const), logs: faker.string.alpha(20) }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsCodeOutputImageObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeOutputImageObject> = {}): RunStepDetailsToolCallsCodeOutputImageObject => ({ ...{ type: faker.helpers.arrayElement(['image'] as const), image: { file_id: faker.string.alpha(20) } }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsCodeObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsCodeObject> = {}): RunStepDetailsToolCallsCodeObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['code_interpreter'] as const), code_interpreter: { input: faker.string.alpha(20), outputs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetRunStepResponseRunStepDetailsToolCallsCodeOutputLogsObjectMock() }, { ...getGetRunStepResponseRunStepDetailsToolCallsCodeOutputImageObjectMock() }]))) } }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsFileSearchObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsFileSearchObject> = {}): RunStepDetailsToolCallsFileSearchObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['file_search'] as const), file_search: { ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement(['default_2024_08_21'] as const), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]), results: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ file_id: faker.string.alpha(20), file_name: faker.string.alpha(20), score: faker.number.int({ min: 0, max: 1 }), content: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ type: faker.helpers.arrayElement([faker.helpers.arrayElement(['text'] as const), undefined]), text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), undefined]) })), undefined]) } }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsFunctionObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsFunctionObject> = {}): RunStepDetailsToolCallsFunctionObject => ({ ...{ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20), output: faker.helpers.arrayElement([faker.string.alpha(20), null]) } }, ...overrideResponse })

export const getGetRunStepResponseRunStepDetailsToolCallsObjectMock = (overrideResponse: Partial<RunStepDetailsToolCallsObject> = {}): RunStepDetailsToolCallsObject => ({ ...{ type: faker.helpers.arrayElement(['tool_calls'] as const), tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getGetRunStepResponseRunStepDetailsToolCallsCodeObjectMock() }, { ...getGetRunStepResponseRunStepDetailsToolCallsFileSearchObjectMock() }, { ...getGetRunStepResponseRunStepDetailsToolCallsFunctionObjectMock() }]))) }, ...overrideResponse })

export function getGetRunStepResponseMock(overrideResponse: Partial< RunStepObject > = {}): RunStepObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run.step'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), assistant_id: faker.string.alpha(20), thread_id: faker.string.alpha(20), run_id: faker.string.alpha(20), type: faker.helpers.arrayElement(['message_creation', 'tool_calls'] as const), status: faker.helpers.arrayElement(['in_progress', 'cancelled', 'failed', 'completed', 'expired'] as const), step_details: faker.helpers.arrayElement([{ ...getGetRunStepResponseRunStepDetailsMessageCreationObjectMock() }, { ...getGetRunStepResponseRunStepDetailsToolCallsObjectMock() }]), last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded'] as const), message: faker.string.alpha(20) }, expired_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, ...overrideResponse }
}

export const getSubmitToolOuputsToRunResponseAssistantToolsCodeMock = (overrideResponse: Partial<AssistantToolsCode> = {}): AssistantToolsCode => ({ ...{ type: faker.helpers.arrayElement(['code_interpreter'] as const) }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseAssistantToolsFileSearchMock = (overrideResponse: Partial<AssistantToolsFileSearch> = {}): AssistantToolsFileSearch => ({ ...{ type: faker.helpers.arrayElement(['file_search'] as const), file_search: faker.helpers.arrayElement([{ max_num_results: faker.helpers.arrayElement([faker.number.int({ min: 1, max: 50 }), undefined]), ranking_options: faker.helpers.arrayElement([{ ranker: faker.helpers.arrayElement([faker.helpers.arrayElement(['auto', 'default_2024_08_21'] as const), undefined]), score_threshold: faker.number.int({ min: 0, max: 1 }) }, undefined]) }, undefined]) }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseAssistantToolsFunctionMock = (overrideResponse: Partial<AssistantToolsFunction> = {}): AssistantToolsFunction => ({ ...{ type: faker.helpers.arrayElement(['function'] as const), function: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), parameters: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseAssistantsNamedToolChoiceMock = (overrideResponse: Partial<AssistantsNamedToolChoice> = {}): AssistantsNamedToolChoice => ({ ...{ type: faker.helpers.arrayElement(['function', 'code_interpreter', 'file_search'] as const), function: faker.helpers.arrayElement([{ name: faker.string.alpha(20) }, undefined]) }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseResponseFormatTextMock = (overrideResponse: Partial<ResponseFormatText> = {}): ResponseFormatText => ({ ...{ type: faker.helpers.arrayElement(['text'] as const) }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseResponseFormatJsonObjectMock = (overrideResponse: Partial<ResponseFormatJsonObject> = {}): ResponseFormatJsonObject => ({ ...{ type: faker.helpers.arrayElement(['json_object'] as const) }, ...overrideResponse })

export const getSubmitToolOuputsToRunResponseResponseFormatJsonSchemaMock = (overrideResponse: Partial<ResponseFormatJsonSchema> = {}): ResponseFormatJsonSchema => ({ ...{ type: faker.helpers.arrayElement(['json_schema'] as const), json_schema: { description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), schema: faker.helpers.arrayElement([{}, undefined]), strict: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]) } }, ...overrideResponse })

export function getSubmitToolOuputsToRunResponseMock(overrideResponse: Partial< RunObject > = {}): RunObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['thread.run'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), thread_id: faker.string.alpha(20), assistant_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['queued', 'in_progress', 'requires_action', 'cancelling', 'cancelled', 'failed', 'completed', 'incomplete', 'expired'] as const), required_action: { type: faker.helpers.arrayElement(['submit_tool_outputs'] as const), submit_tool_outputs: { tool_calls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })) } }, last_error: { code: faker.helpers.arrayElement(['server_error', 'rate_limit_exceeded', 'invalid_prompt'] as const), message: faker.string.alpha(20) }, expires_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), started_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), cancelled_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), failed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), completed_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), incomplete_details: { reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['max_completion_tokens', 'max_prompt_tokens'] as const), undefined]) }, model: faker.string.alpha(20), instructions: faker.string.alpha(20), tools: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{ ...getSubmitToolOuputsToRunResponseAssistantToolsCodeMock() }, { ...getSubmitToolOuputsToRunResponseAssistantToolsFileSearchMock() }, { ...getSubmitToolOuputsToRunResponseAssistantToolsFunctionMock() }]))), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, usage: { completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, temperature: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), top_p: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), max_prompt_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), max_completion_tokens: faker.helpers.arrayElement([faker.number.int({ min: 256, max: undefined }), null]), truncation_strategy: { type: faker.helpers.arrayElement(['auto', 'last_messages'] as const), last_messages: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: 1, max: undefined }), null]), undefined]) }, tool_choice: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['none', 'auto', 'required'] as const), { ...getSubmitToolOuputsToRunResponseAssistantsNamedToolChoiceMock() }]) }, parallel_tool_calls: faker.datatype.boolean(), response_format: { ...faker.helpers.arrayElement([faker.helpers.arrayElement(['auto'] as const), { ...getSubmitToolOuputsToRunResponseResponseFormatTextMock() }, { ...getSubmitToolOuputsToRunResponseResponseFormatJsonObjectMock() }, { ...getSubmitToolOuputsToRunResponseResponseFormatJsonSchemaMock() }]) }, ...overrideResponse }
}

export function getListAssistantsMockHandler(overrideResponse?: ListAssistantsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListAssistantsResponse> | ListAssistantsResponse)) {
  return http.get('*/assistants', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListAssistantsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateAssistantMockHandler(overrideResponse?: AssistantObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssistantObject> | AssistantObject)) {
  return http.post('*/assistants', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateAssistantResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetAssistantMockHandler(overrideResponse?: AssistantObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AssistantObject> | AssistantObject)) {
  return http.get('*/assistants/:assistantId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetAssistantResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyAssistantMockHandler(overrideResponse?: AssistantObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AssistantObject> | AssistantObject)) {
  return http.post('*/assistants/:assistantId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyAssistantResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteAssistantMockHandler(overrideResponse?: DeleteAssistantResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteAssistantResponse> | DeleteAssistantResponse)) {
  return http.delete('*/assistants/:assistantId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteAssistantResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateThreadMockHandler(overrideResponse?: ThreadObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ThreadObject> | ThreadObject)) {
  return http.post('*/threads', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateThreadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateThreadAndRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.post('*/threads/runs', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateThreadAndRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetThreadMockHandler(overrideResponse?: ThreadObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ThreadObject> | ThreadObject)) {
  return http.get('*/threads/:threadId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetThreadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyThreadMockHandler(overrideResponse?: ThreadObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ThreadObject> | ThreadObject)) {
  return http.post('*/threads/:threadId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyThreadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteThreadMockHandler(overrideResponse?: DeleteThreadResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteThreadResponse> | DeleteThreadResponse)) {
  return http.delete('*/threads/:threadId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteThreadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getListMessagesMockHandler(overrideResponse?: ListMessagesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListMessagesResponse> | ListMessagesResponse)) {
  return http.get('*/threads/:threadId/messages', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListMessagesResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateMessageMockHandler(overrideResponse?: MessageObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MessageObject> | MessageObject)) {
  return http.post('*/threads/:threadId/messages', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateMessageResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetMessageMockHandler(overrideResponse?: MessageObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MessageObject> | MessageObject)) {
  return http.get('*/threads/:threadId/messages/:messageId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetMessageResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyMessageMockHandler(overrideResponse?: MessageObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MessageObject> | MessageObject)) {
  return http.post('*/threads/:threadId/messages/:messageId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyMessageResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteMessageMockHandler(overrideResponse?: DeleteMessageResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteMessageResponse> | DeleteMessageResponse)) {
  return http.delete('*/threads/:threadId/messages/:messageId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteMessageResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getListRunsMockHandler(overrideResponse?: ListRunsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListRunsResponse> | ListRunsResponse)) {
  return http.get('*/threads/:threadId/runs', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListRunsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.post('*/threads/:threadId/runs', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.get('*/threads/:threadId/runs/:runId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.post('*/threads/:threadId/runs/:runId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCancelRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.post('*/threads/:threadId/runs/:runId/cancel', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCancelRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getListRunStepsMockHandler(overrideResponse?: ListRunStepsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListRunStepsResponse> | ListRunStepsResponse)) {
  return http.get('*/threads/:threadId/runs/:runId/steps', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListRunStepsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetRunStepMockHandler(overrideResponse?: RunStepObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RunStepObject> | RunStepObject)) {
  return http.get('*/threads/:threadId/runs/:runId/steps/:stepId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetRunStepResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getSubmitToolOuputsToRunMockHandler(overrideResponse?: RunObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RunObject> | RunObject)) {
  return http.post('*/threads/:threadId/runs/:runId/submit_tool_outputs', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getSubmitToolOuputsToRunResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getAssistantsMock() {
  return [
    getListAssistantsMockHandler(),
    getCreateAssistantMockHandler(),
    getGetAssistantMockHandler(),
    getModifyAssistantMockHandler(),
    getDeleteAssistantMockHandler(),
    getCreateThreadMockHandler(),
    getCreateThreadAndRunMockHandler(),
    getGetThreadMockHandler(),
    getModifyThreadMockHandler(),
    getDeleteThreadMockHandler(),
    getListMessagesMockHandler(),
    getCreateMessageMockHandler(),
    getGetMessageMockHandler(),
    getModifyMessageMockHandler(),
    getDeleteMessageMockHandler(),
    getListRunsMockHandler(),
    getCreateRunMockHandler(),
    getGetRunMockHandler(),
    getModifyRunMockHandler(),
    getCancelRunMockHandler(),
    getListRunStepsMockHandler(),
    getGetRunStepMockHandler(),
    getSubmitToolOuputsToRunMockHandler(),
  ]
}
