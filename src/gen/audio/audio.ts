/* eslint-disable ts/explicit-function-return-type */

import type {
    AxiosRequestConfig,
    AxiosResponse,
} from 'axios'
import type {
    CreateSpeechRequest,
    CreateTranscription200,
    CreateTranscriptionRequest,
    CreateTranslation200,
    CreateTranslationRequest,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getAudio() {
/**
 * @summary Generates audio from the input text.
 */
    const createSpeech = <TData = AxiosResponse<Blob>>(
        createSpeechRequest: CreateSpeechRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/audio/speech`,
            createSpeechRequest,
            {
                responseType: 'blob',
                ...options,
            },
        )
    }
    /**
     * @summary Transcribes audio into the input language.
     */
    const createTranscription = <TData = AxiosResponse<CreateTranscription200>>(
        createTranscriptionRequest: CreateTranscriptionRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        const formData = new FormData()
        formData.append('file', createTranscriptionRequest.file)
        formData.append('model', createTranscriptionRequest.model)
        if (createTranscriptionRequest.language !== undefined) {
            formData.append('language', createTranscriptionRequest.language)
        }
        if (createTranscriptionRequest.prompt !== undefined) {
            formData.append('prompt', createTranscriptionRequest.prompt)
        }
        if (createTranscriptionRequest.response_format !== undefined) {
            formData.append('response_format', createTranscriptionRequest.response_format)
        }
        if (createTranscriptionRequest.temperature !== undefined) {
            formData.append('temperature', createTranscriptionRequest.temperature.toString())
        }
        if (createTranscriptionRequest['timestamp_granularities[]'] !== undefined) {
            createTranscriptionRequest['timestamp_granularities[]'].forEach(value => formData.append('timestamp_granularities[]', value))
        }

        return axios.post(
            `http://localhost:3000/v1/audio/transcriptions`,
            formData,
            options,
        )
    }
    /**
     * @summary Translates audio into English.
     */
    const createTranslation = <TData = AxiosResponse<CreateTranslation200>>(
        createTranslationRequest: CreateTranslationRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        const formData = new FormData()
        formData.append('file', createTranslationRequest.file)
        formData.append('model', createTranslationRequest.model)
        if (createTranslationRequest.prompt !== undefined) {
            formData.append('prompt', createTranslationRequest.prompt)
        }
        if (createTranslationRequest.response_format !== undefined) {
            formData.append('response_format', createTranslationRequest.response_format)
        }
        if (createTranslationRequest.temperature !== undefined) {
            formData.append('temperature', createTranslationRequest.temperature.toString())
        }

        return axios.post(
            `http://localhost:3000/v1/audio/translations`,
            formData,
            options,
        )
    }
    return { createSpeech, createTranscription, createTranslation }
}
export type CreateSpeechResult = AxiosResponse<Blob>
export type CreateTranscriptionResult = AxiosResponse<CreateTranscription200>
export type CreateTranslationResult = AxiosResponse<CreateTranslation200>
