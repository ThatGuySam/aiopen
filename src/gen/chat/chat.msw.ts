/* eslint-disable ts/explicit-function-return-type */

import type {
    CreateChatCompletionResponse,
    CreateChatCompletionStreamResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

// @ts-expect-error - Working fine for now
export const getCreateChatCompletionResponseMock = (overrideResponse: Partial< CreateChatCompletionResponse | CreateChatCompletionStreamResponse > = {}): CreateChatCompletionResponse | CreateChatCompletionStreamResponse => (faker.helpers.arrayElement([{ id: faker.string.alpha(20), choices: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ finish_reason: faker.helpers.arrayElement(['stop', 'length', 'tool_calls', 'content_filter', 'function_call'] as const), index: faker.number.int({ min: undefined, max: undefined }), message: { content: faker.helpers.arrayElement([faker.string.alpha(20), null]), refusal: faker.helpers.arrayElement([faker.string.alpha(20), null]), tool_calls: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), type: faker.helpers.arrayElement(['function'] as const), function: { name: faker.string.alpha(20), arguments: faker.string.alpha(20) } })), undefined]), role: faker.helpers.arrayElement(['assistant'] as const), function_call: faker.helpers.arrayElement([{ arguments: faker.string.alpha(20), name: faker.string.alpha(20) }, undefined]), audio: faker.helpers.arrayElement([{ id: faker.string.alpha(20), expires_at: faker.number.int({ min: undefined, max: undefined }), data: faker.string.alpha(20), transcript: faker.string.alpha(20) }, undefined]) }, logprobs: { content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))), top_logprobs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))) })) })), refusal: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))), top_logprobs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))) })) })) } })), created: faker.number.int({ min: undefined, max: undefined }), model: faker.string.alpha(20), service_tier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.helpers.arrayElement(['scale', 'default'] as const), null]), undefined]), system_fingerprint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), object: faker.helpers.arrayElement(['chat.completion'] as const), usage: faker.helpers.arrayElement([{ completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }), completion_tokens_details: faker.helpers.arrayElement([{ accepted_prediction_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), audio_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), reasoning_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), rejected_prediction_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]) }, undefined]), prompt_tokens_details: faker.helpers.arrayElement([{ audio_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), cached_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]) }, undefined]) }, undefined]), ...overrideResponse }, { id: faker.string.alpha(20), choices: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ delta: { content: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), function_call: faker.helpers.arrayElement([{ arguments: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]), tool_calls: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ index: faker.number.int({ min: undefined, max: undefined }), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.helpers.arrayElement(['function'] as const), undefined]), function: faker.helpers.arrayElement([{ name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), arguments: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]) })), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['developer', 'system', 'user', 'assistant', 'tool'] as const), undefined]), refusal: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]) }, logprobs: faker.helpers.arrayElement([{ content: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))), top_logprobs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))) })) })), refusal: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))), top_logprobs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ token: faker.string.alpha(20), logprob: faker.number.int({ min: undefined, max: undefined }), bytes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({ min: undefined, max: undefined }))) })) })) }, undefined]), finish_reason: faker.helpers.arrayElement([faker.helpers.arrayElement(['stop', 'length', 'tool_calls', 'content_filter', 'function_call'] as const), null]), index: faker.number.int({ min: undefined, max: undefined }) })), created: faker.number.int({ min: undefined, max: undefined }), model: faker.string.alpha(20), service_tier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.helpers.arrayElement(['scale', 'default'] as const), null]), undefined]), system_fingerprint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), object: faker.helpers.arrayElement(['chat.completion.chunk'] as const), usage: faker.helpers.arrayElement([{ completion_tokens: faker.number.int({ min: undefined, max: undefined }), prompt_tokens: faker.number.int({ min: undefined, max: undefined }), total_tokens: faker.number.int({ min: undefined, max: undefined }) }, undefined]), ...overrideResponse }]))

export function getCreateChatCompletionMockHandler(overrideResponse?: CreateChatCompletionResponse | CreateChatCompletionStreamResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateChatCompletionResponse | CreateChatCompletionStreamResponse> | CreateChatCompletionResponse | CreateChatCompletionStreamResponse)) {
    return http.post('*/chat/completions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateChatCompletionResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}
export function getChatMock() {
    return [
        getCreateChatCompletionMockHandler(),
    ]
}
