/* eslint-disable ts/explicit-function-return-type */

import type {
    CreateCompletionResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export function getCreateCompletionResponseMock(overrideResponse: Partial< CreateCompletionResponse > = {}): CreateCompletionResponse {
    return {
        id: faker.string.alpha(20),
        choices: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            finish_reason: faker.helpers.arrayElement([
                'stop',
                'length',
                'content_filter',
            ] as const),
            index: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            logprobs: {
                text_offset: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.number.int({
                        min: undefined,
                        max: undefined,
                    }))),
                    undefined,
                ]),
                token_logprobs: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.number.int({
                        min: undefined,
                        max: undefined,
                    }))),
                    undefined,
                ]),
                tokens: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
                    undefined,
                ]),
                top_logprobs: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => ({
                        [faker.string.alphanumeric(5)]: faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                    })),
                    undefined,
                ]),
            },
            text: faker.string.alpha(20),
        })),
        created: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        model: faker.string.alpha(20),
        system_fingerprint: faker.helpers.arrayElement([
            faker.string.alpha(20),
            undefined,
        ]),
        object: faker.helpers.arrayElement(['text_completion'] as const),
        usage: faker.helpers.arrayElement([
            {
                completion_tokens: faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                prompt_tokens: faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                total_tokens: faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                completion_tokens_details: faker.helpers.arrayElement([
                    {
                        accepted_prediction_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                        audio_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                        reasoning_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                        rejected_prediction_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
                prompt_tokens_details: faker.helpers.arrayElement([
                    {
                        audio_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                        cached_tokens: faker.helpers.arrayElement([
                            faker.number.int({
                                min: undefined,
                                max: undefined,
                            }),
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
            },
            undefined,
        ]),
        ...overrideResponse,
    }
}

export function getCreateCompletionMockHandler(overrideResponse?: CreateCompletionResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateCompletionResponse> | CreateCompletionResponse)) {
    return http.post('*/completions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateCompletionResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}
export function getCompletionsMock() {
    return [getCreateCompletionMockHandler()]
}
