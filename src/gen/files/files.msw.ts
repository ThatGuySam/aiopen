/* eslint-disable ts/explicit-function-return-type */

import type {
  DeleteFileResponse,
  ListFilesResponse,
  OpenAIFile,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getListFilesResponseMock = (overrideResponse: Partial< ListFilesResponse > = {}): ListFilesResponse => ({ object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getCreateFileResponseMock = (overrideResponse: Partial< OpenAIFile > = {}): OpenAIFile => ({ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse })

export const getDeleteFileResponseMock = (overrideResponse: Partial< DeleteFileResponse > = {}): DeleteFileResponse => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), deleted: faker.datatype.boolean(), ...overrideResponse })

export const getRetrieveFileResponseMock = (overrideResponse: Partial< OpenAIFile > = {}): OpenAIFile => ({ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse })

export const getDownloadFileResponseMock = (): string => (faker.word.sample())

export function getListFilesMockHandler(overrideResponse?: ListFilesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListFilesResponse> | ListFilesResponse)) {
  return http.get('*/files', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListFilesResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateFileMockHandler(overrideResponse?: OpenAIFile | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<OpenAIFile> | OpenAIFile)) {
  return http.post('*/files', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteFileMockHandler(overrideResponse?: DeleteFileResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteFileResponse> | DeleteFileResponse)) {
  return http.delete('*/files/:fileId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getRetrieveFileMockHandler(overrideResponse?: OpenAIFile | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<OpenAIFile> | OpenAIFile)) {
  return http.get('*/files/:fileId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getRetrieveFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDownloadFileMockHandler(overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) {
  return http.get('*/files/:fileId/content', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDownloadFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getFilesMock() {
  return [
    getListFilesMockHandler(),
    getCreateFileMockHandler(),
    getDeleteFileMockHandler(),
    getRetrieveFileMockHandler(),
    getDownloadFileMockHandler(),
  ]
}
