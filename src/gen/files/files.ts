/* eslint-disable jsdoc/check-alignment */
/* eslint-disable ts/explicit-function-return-type */

import type {
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios'
import type {
  CreateFileRequest,
  DeleteFileResponse,
  ListFilesParams,
  ListFilesResponse,
  OpenAIFile,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getFiles() {
/**
 * @summary Returns a list of files.
 */
  const listFiles = <TData = AxiosResponse<ListFilesResponse>>(
    params?: ListFilesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/files`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    )
  }
  /**
 * @summary Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.

The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.

The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.

The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).

Please [contact us](https://help.openai.com/) if you need to increase these storage limits.

 */
  const createFile = <TData = AxiosResponse<OpenAIFile>>(
    createFileRequest: CreateFileRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    const formData = new FormData()
    formData.append('file', createFileRequest.file)
    formData.append('purpose', createFileRequest.purpose)

    return axios.post(
      `http://localhost:3000/v1/files`,
      formData,
      options,
    )
  }
  /**
 * @summary Delete a file.
 */
  const deleteFile = <TData = AxiosResponse<DeleteFileResponse>>(
    fileId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.delete(
      `http://localhost:3000/v1/files/${fileId}`,
      options,
    )
  }
  /**
 * @summary Returns information about a specific file.
 */
  const retrieveFile = <TData = AxiosResponse<OpenAIFile>>(
    fileId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/files/${fileId}`,
      options,
    )
  }
  /**
 * @summary Returns the contents of the specified file.
 */
  const downloadFile = <TData = AxiosResponse<string>>(
    fileId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/files/${fileId}/content`,
      options,
    )
  }
  return { listFiles, createFile, deleteFile, retrieveFile, downloadFile }
}
export type ListFilesResult = AxiosResponse<ListFilesResponse>
export type CreateFileResult = AxiosResponse<OpenAIFile>
export type DeleteFileResult = AxiosResponse<DeleteFileResponse>
export type RetrieveFileResult = AxiosResponse<OpenAIFile>
export type DownloadFileResult = AxiosResponse<string>
