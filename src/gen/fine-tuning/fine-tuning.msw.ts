/* eslint-disable ts/explicit-function-return-type */

import type {
    FineTuningIntegration,
    FineTuningJob,
    ListFineTuningJobCheckpointsResponse,
    ListFineTuningJobEventsResponse,
    ListPaginatedFineTuningJobsResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export function getCreateFineTuningJobResponseFineTuningIntegrationMock(overrideResponse: Partial<FineTuningIntegration> = {}): FineTuningIntegration {
    return {
        ...{
            type: faker.helpers.arrayElement(['wandb'] as const),
            wandb: {
                project: faker.string.alpha(20),
                name: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                entity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                tags: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
                    undefined,
                ]),
            },
        },
        ...overrideResponse,
    }
}

export function getCreateFineTuningJobResponseMock(overrideResponse: Partial< FineTuningJob > = {}): FineTuningJob {
    return {
        id: faker.string.alpha(20),
        created_at: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        error: {
            code: faker.string.alpha(20),
            message: faker.string.alpha(20),
            param: faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
        },
        fine_tuned_model: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        finished_at: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        hyperparameters: {
            batch_size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 256,
                    }),
                ]),
                undefined,
            ]),
            learning_rate_multiplier: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 0,
                        max: undefined,
                    }),
                ]),
                undefined,
            ]),
            n_epochs: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 50,
                    }),
                ]),
                undefined,
            ]),
        },
        model: faker.string.alpha(20),
        object: faker.helpers.arrayElement(['fine_tuning.job'] as const),
        organization_id: faker.string.alpha(20),
        result_files: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
        status: faker.helpers.arrayElement([
            'validating_files',
            'queued',
            'running',
            'succeeded',
            'failed',
            'cancelled',
        ] as const),
        trained_tokens: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        training_file: faker.string.alpha(20),
        validation_file: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        integrations: faker.helpers.arrayElement([
            Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getCreateFineTuningJobResponseFineTuningIntegrationMock(),
                },
            ]))),
            undefined,
        ]),
        seed: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        estimated_finish: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                null,
            ]),
            undefined,
        ]),
        method: faker.helpers.arrayElement([
            {
                type: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        'supervised',
                        'dpo',
                    ] as const),
                    undefined,
                ]),
                supervised: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
                dpo: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                beta: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: 2,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
            },
            undefined,
        ]),
        ...overrideResponse,
    }
}

export function getListPaginatedFineTuningJobsResponseFineTuningIntegrationMock(overrideResponse: Partial<FineTuningIntegration> = {}): FineTuningIntegration {
    return {
        ...{
            type: faker.helpers.arrayElement(['wandb'] as const),
            wandb: {
                project: faker.string.alpha(20),
                name: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                entity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                tags: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
                    undefined,
                ]),
            },
        },
        ...overrideResponse,
    }
}

export function getListPaginatedFineTuningJobsResponseMock(overrideResponse: Partial< ListPaginatedFineTuningJobsResponse > = {}): ListPaginatedFineTuningJobsResponse {
    return {
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            id: faker.string.alpha(20),
            created_at: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            error: {
                code: faker.string.alpha(20),
                message: faker.string.alpha(20),
                param: faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
            },
            fine_tuned_model: faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
            finished_at: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                null,
            ]),
            hyperparameters: {
                batch_size: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.helpers.arrayElement(['auto'] as const),
                        faker.number.int({
                            min: 1,
                            max: 256,
                        }),
                    ]),
                    undefined,
                ]),
                learning_rate_multiplier: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.helpers.arrayElement(['auto'] as const),
                        faker.number.int({
                            min: 0,
                            max: undefined,
                        }),
                    ]),
                    undefined,
                ]),
                n_epochs: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.helpers.arrayElement(['auto'] as const),
                        faker.number.int({
                            min: 1,
                            max: 50,
                        }),
                    ]),
                    undefined,
                ]),
            },
            model: faker.string.alpha(20),
            object: faker.helpers.arrayElement(['fine_tuning.job'] as const),
            organization_id: faker.string.alpha(20),
            result_files: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
            status: faker.helpers.arrayElement([
                'validating_files',
                'queued',
                'running',
                'succeeded',
                'failed',
                'cancelled',
            ] as const),
            trained_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                null,
            ]),
            training_file: faker.string.alpha(20),
            validation_file: faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
            integrations: faker.helpers.arrayElement([
                Array.from({
                    length: faker.number.int({
                        min: 1,
                        max: 10,
                    }),
                }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                    {
                        ...getListPaginatedFineTuningJobsResponseFineTuningIntegrationMock(),
                    },
                ]))),
                undefined,
            ]),
            seed: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            estimated_finish: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    null,
                ]),
                undefined,
            ]),
            method: faker.helpers.arrayElement([
                {
                    type: faker.helpers.arrayElement([
                        faker.helpers.arrayElement([
                            'supervised',
                            'dpo',
                        ] as const),
                        undefined,
                    ]),
                    supervised: faker.helpers.arrayElement([
                        {
                            hyperparameters: faker.helpers.arrayElement([
                                {
                                    batch_size: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 1,
                                                max: 256,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                    learning_rate_multiplier: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 0,
                                                max: undefined,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                    n_epochs: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 1,
                                                max: 50,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                },
                                undefined,
                            ]),
                        },
                        undefined,
                    ]),
                    dpo: faker.helpers.arrayElement([
                        {
                            hyperparameters: faker.helpers.arrayElement([
                                {
                                    beta: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 0,
                                                max: 2,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                    batch_size: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 1,
                                                max: 256,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                    learning_rate_multiplier: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 0,
                                                max: undefined,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                    n_epochs: faker.helpers.arrayElement([
                                        faker.helpers.arrayElement([
                                            faker.helpers.arrayElement(['auto'] as const),
                                            faker.number.int({
                                                min: 1,
                                                max: 50,
                                            }),
                                        ]),
                                        undefined,
                                    ]),
                                },
                                undefined,
                            ]),
                        },
                        undefined,
                    ]),
                },
                undefined,
            ]),
        })),
        has_more: faker.datatype.boolean(),
        object: faker.helpers.arrayElement(['list'] as const),
        ...overrideResponse,
    }
}

export function getRetrieveFineTuningJobResponseFineTuningIntegrationMock(overrideResponse: Partial<FineTuningIntegration> = {}): FineTuningIntegration {
    return {
        ...{
            type: faker.helpers.arrayElement(['wandb'] as const),
            wandb: {
                project: faker.string.alpha(20),
                name: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                entity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                tags: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
                    undefined,
                ]),
            },
        },
        ...overrideResponse,
    }
}

export function getRetrieveFineTuningJobResponseMock(overrideResponse: Partial< FineTuningJob > = {}): FineTuningJob {
    return {
        id: faker.string.alpha(20),
        created_at: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        error: {
            code: faker.string.alpha(20),
            message: faker.string.alpha(20),
            param: faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
        },
        fine_tuned_model: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        finished_at: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        hyperparameters: {
            batch_size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 256,
                    }),
                ]),
                undefined,
            ]),
            learning_rate_multiplier: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 0,
                        max: undefined,
                    }),
                ]),
                undefined,
            ]),
            n_epochs: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 50,
                    }),
                ]),
                undefined,
            ]),
        },
        model: faker.string.alpha(20),
        object: faker.helpers.arrayElement(['fine_tuning.job'] as const),
        organization_id: faker.string.alpha(20),
        result_files: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
        status: faker.helpers.arrayElement([
            'validating_files',
            'queued',
            'running',
            'succeeded',
            'failed',
            'cancelled',
        ] as const),
        trained_tokens: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        training_file: faker.string.alpha(20),
        validation_file: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        integrations: faker.helpers.arrayElement([
            Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getRetrieveFineTuningJobResponseFineTuningIntegrationMock(),
                },
            ]))),
            undefined,
        ]),
        seed: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        estimated_finish: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                null,
            ]),
            undefined,
        ]),
        method: faker.helpers.arrayElement([
            {
                type: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        'supervised',
                        'dpo',
                    ] as const),
                    undefined,
                ]),
                supervised: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
                dpo: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                beta: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: 2,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
            },
            undefined,
        ]),
        ...overrideResponse,
    }
}

export function getCancelFineTuningJobResponseFineTuningIntegrationMock(overrideResponse: Partial<FineTuningIntegration> = {}): FineTuningIntegration {
    return {
        ...{
            type: faker.helpers.arrayElement(['wandb'] as const),
            wandb: {
                project: faker.string.alpha(20),
                name: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                entity: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        null,
                    ]),
                    undefined,
                ]),
                tags: faker.helpers.arrayElement([
                    Array.from({
                        length: faker.number.int({
                            min: 1,
                            max: 10,
                        }),
                    }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
                    undefined,
                ]),
            },
        },
        ...overrideResponse,
    }
}

export function getCancelFineTuningJobResponseMock(overrideResponse: Partial< FineTuningJob > = {}): FineTuningJob {
    return {
        id: faker.string.alpha(20),
        created_at: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        error: {
            code: faker.string.alpha(20),
            message: faker.string.alpha(20),
            param: faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
        },
        fine_tuned_model: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        finished_at: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        hyperparameters: {
            batch_size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 256,
                    }),
                ]),
                undefined,
            ]),
            learning_rate_multiplier: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 0,
                        max: undefined,
                    }),
                ]),
                undefined,
            ]),
            n_epochs: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.helpers.arrayElement(['auto'] as const),
                    faker.number.int({
                        min: 1,
                        max: 50,
                    }),
                ]),
                undefined,
            ]),
        },
        model: faker.string.alpha(20),
        object: faker.helpers.arrayElement(['fine_tuning.job'] as const),
        organization_id: faker.string.alpha(20),
        result_files: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => (faker.string.alpha(20))),
        status: faker.helpers.arrayElement([
            'validating_files',
            'queued',
            'running',
            'succeeded',
            'failed',
            'cancelled',
        ] as const),
        trained_tokens: faker.helpers.arrayElement([
            faker.number.int({
                min: undefined,
                max: undefined,
            }),
            null,
        ]),
        training_file: faker.string.alpha(20),
        validation_file: faker.helpers.arrayElement([
            faker.string.alpha(20),
            null,
        ]),
        integrations: faker.helpers.arrayElement([
            Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getCancelFineTuningJobResponseFineTuningIntegrationMock(),
                },
            ]))),
            undefined,
        ]),
        seed: faker.number.int({
            min: undefined,
            max: undefined,
        }),
        estimated_finish: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                null,
            ]),
            undefined,
        ]),
        method: faker.helpers.arrayElement([
            {
                type: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                        'supervised',
                        'dpo',
                    ] as const),
                    undefined,
                ]),
                supervised: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
                dpo: faker.helpers.arrayElement([
                    {
                        hyperparameters: faker.helpers.arrayElement([
                            {
                                beta: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: 2,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                batch_size: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 256,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                learning_rate_multiplier: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 0,
                                            max: undefined,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                                n_epochs: faker.helpers.arrayElement([
                                    faker.helpers.arrayElement([
                                        faker.helpers.arrayElement(['auto'] as const),
                                        faker.number.int({
                                            min: 1,
                                            max: 50,
                                        }),
                                    ]),
                                    undefined,
                                ]),
                            },
                            undefined,
                        ]),
                    },
                    undefined,
                ]),
            },
            undefined,
        ]),
        ...overrideResponse,
    }
}

export function getListFineTuningJobCheckpointsResponseMock(overrideResponse: Partial< ListFineTuningJobCheckpointsResponse > = {}): ListFineTuningJobCheckpointsResponse {
    return {
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            id: faker.string.alpha(20),
            created_at: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            fine_tuned_model_checkpoint: faker.string.alpha(20),
            step_number: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            metrics: {
                step: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                train_loss: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                train_mean_token_accuracy: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                valid_loss: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                valid_mean_token_accuracy: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                full_valid_loss: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
                full_valid_mean_token_accuracy: faker.helpers.arrayElement([
                    faker.number.int({
                        min: undefined,
                        max: undefined,
                    }),
                    undefined,
                ]),
            },
            fine_tuning_job_id: faker.string.alpha(20),
            object: faker.helpers.arrayElement(['fine_tuning.job.checkpoint'] as const),
        })),
        object: faker.helpers.arrayElement(['list'] as const),
        first_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
            undefined,
        ]),
        last_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
                faker.string.alpha(20),
                null,
            ]),
            undefined,
        ]),
        has_more: faker.datatype.boolean(),
        ...overrideResponse,
    }
}

export function getListFineTuningEventsResponseMock(overrideResponse: Partial< ListFineTuningJobEventsResponse > = {}): ListFineTuningJobEventsResponse {
    return {
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['fine_tuning.job.event'] as const),
            id: faker.string.alpha(20),
            created_at: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            level: faker.helpers.arrayElement([
                'info',
                'warn',
                'error',
            ] as const),
            message: faker.string.alpha(20),
            type: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    'message',
                    'metrics',
                ] as const),
                undefined,
            ]),
            data: faker.helpers.arrayElement([
                {},
                undefined,
            ]),
        })),
        object: faker.helpers.arrayElement(['list'] as const),
        has_more: faker.datatype.boolean(),
        ...overrideResponse,
    }
}

export function getCreateFineTuningJobMockHandler(overrideResponse?: FineTuningJob | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FineTuningJob> | FineTuningJob)) {
    return http.post('*/fine_tuning/jobs', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateFineTuningJobResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getListPaginatedFineTuningJobsMockHandler(overrideResponse?: ListPaginatedFineTuningJobsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListPaginatedFineTuningJobsResponse> | ListPaginatedFineTuningJobsResponse)) {
    return http.get('*/fine_tuning/jobs', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListPaginatedFineTuningJobsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getRetrieveFineTuningJobMockHandler(overrideResponse?: FineTuningJob | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FineTuningJob> | FineTuningJob)) {
    return http.get('*/fine_tuning/jobs/:fineTuningJobId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getRetrieveFineTuningJobResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getCancelFineTuningJobMockHandler(overrideResponse?: FineTuningJob | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FineTuningJob> | FineTuningJob)) {
    return http.post('*/fine_tuning/jobs/:fineTuningJobId/cancel', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCancelFineTuningJobResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getListFineTuningJobCheckpointsMockHandler(overrideResponse?: ListFineTuningJobCheckpointsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListFineTuningJobCheckpointsResponse> | ListFineTuningJobCheckpointsResponse)) {
    return http.get('*/fine_tuning/jobs/:fineTuningJobId/checkpoints', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListFineTuningJobCheckpointsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getListFineTuningEventsMockHandler(overrideResponse?: ListFineTuningJobEventsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListFineTuningJobEventsResponse> | ListFineTuningJobEventsResponse)) {
    return http.get('*/fine_tuning/jobs/:fineTuningJobId/events', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListFineTuningEventsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}
export function getFineTuningMock() {
    return [
        getCreateFineTuningJobMockHandler(),
        getListPaginatedFineTuningJobsMockHandler(),
        getRetrieveFineTuningJobMockHandler(),
        getCancelFineTuningJobMockHandler(),
        getListFineTuningJobCheckpointsMockHandler(),
        getListFineTuningEventsMockHandler(),
    ]
}
