/* eslint-disable ts/explicit-function-return-type */

import type {
  ImagesResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getCreateImageEditResponseMock = (overrideResponse: Partial< ImagesResponse > = {}): ImagesResponse => ({ created: faker.number.int({ min: undefined, max: undefined }), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ b64_json: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), revised_prompt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), ...overrideResponse })

export const getCreateImageResponseMock = (overrideResponse: Partial< ImagesResponse > = {}): ImagesResponse => ({ created: faker.number.int({ min: undefined, max: undefined }), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ b64_json: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), revised_prompt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), ...overrideResponse })

export const getCreateImageVariationResponseMock = (overrideResponse: Partial< ImagesResponse > = {}): ImagesResponse => ({ created: faker.number.int({ min: undefined, max: undefined }), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ b64_json: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), revised_prompt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) })), ...overrideResponse })

export function getCreateImageEditMockHandler(overrideResponse?: ImagesResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ImagesResponse> | ImagesResponse)) {
  return http.post('*/images/edits', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateImageEditResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateImageMockHandler(overrideResponse?: ImagesResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ImagesResponse> | ImagesResponse)) {
  return http.post('*/images/generations', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateImageResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateImageVariationMockHandler(overrideResponse?: ImagesResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ImagesResponse> | ImagesResponse)) {
  return http.post('*/images/variations', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateImageVariationResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getImagesMock() {
  return [
    getCreateImageEditMockHandler(),
    getCreateImageMockHandler(),
    getCreateImageVariationMockHandler(),
  ]
}
