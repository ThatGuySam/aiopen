/* eslint-disable ts/explicit-function-return-type */

import type {
    AxiosRequestConfig,
    AxiosResponse,
} from 'axios'
import type {
    CreateImageEditRequest,
    CreateImageRequest,
    CreateImageVariationRequest,
    ImagesResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getImages() {
/**
 * @summary Creates an edited or extended image given an original image and a prompt.
 */
    const createImageEdit = <TData = AxiosResponse<ImagesResponse>>(
        createImageEditRequest: CreateImageEditRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        const formData = new FormData()
        formData.append('image', createImageEditRequest.image)
        formData.append('prompt', createImageEditRequest.prompt)
        if (createImageEditRequest.mask !== undefined) {
            formData.append('mask', createImageEditRequest.mask)
        }
        if (createImageEditRequest.model !== undefined && createImageEditRequest.model !== null) {
            formData.append('model', createImageEditRequest.model)
        }
        if (createImageEditRequest.n !== undefined && createImageEditRequest.n !== null) {
            formData.append('n', createImageEditRequest.n.toString())
        }
        if (createImageEditRequest.size !== undefined && createImageEditRequest.size !== null) {
            formData.append('size', createImageEditRequest.size)
        }
        if (createImageEditRequest.response_format !== undefined && createImageEditRequest.response_format !== null) {
            formData.append('response_format', createImageEditRequest.response_format)
        }
        if (createImageEditRequest.user !== undefined) {
            formData.append('user', createImageEditRequest.user)
        }

        return axios.post(
            `http://localhost:3000/v1/images/edits`,
            formData,
            options,
        )
    }
    /**
     * @summary Creates an image given a prompt.
     */
    const createImage = <TData = AxiosResponse<ImagesResponse>>(
        createImageRequest: CreateImageRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/images/generations`,
            createImageRequest,
            options,
        )
    }
    /**
     * @summary Creates a variation of a given image.
     */
    const createImageVariation = <TData = AxiosResponse<ImagesResponse>>(
        createImageVariationRequest: CreateImageVariationRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        const formData = new FormData()
        formData.append('image', createImageVariationRequest.image)
        if (createImageVariationRequest.model !== undefined && createImageVariationRequest.model !== null) {
            formData.append('model', createImageVariationRequest.model)
        }
        if (createImageVariationRequest.n !== undefined && createImageVariationRequest.n !== null) {
            formData.append('n', createImageVariationRequest.n.toString())
        }
        if (createImageVariationRequest.response_format !== undefined && createImageVariationRequest.response_format !== null) {
            formData.append('response_format', createImageVariationRequest.response_format)
        }
        if (createImageVariationRequest.size !== undefined && createImageVariationRequest.size !== null) {
            formData.append('size', createImageVariationRequest.size)
        }
        if (createImageVariationRequest.user !== undefined) {
            formData.append('user', createImageVariationRequest.user)
        }

        return axios.post(
            `http://localhost:3000/v1/images/variations`,
            formData,
            options,
        )
    }
    return {
        createImageEdit,
        createImage,
        createImageVariation,
    }
}
export type CreateImageEditResult = AxiosResponse<ImagesResponse>
export type CreateImageResult = AxiosResponse<ImagesResponse>
export type CreateImageVariationResult = AxiosResponse<ImagesResponse>
