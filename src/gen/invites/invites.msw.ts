/* eslint-disable ts/explicit-function-return-type */

import type {
  Invite,
  InviteDeleteResponse,
  InviteListResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getListInvitesResponseMock = (overrideResponse: Partial< InviteListResponse > = {}): InviteListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['organization.invite'] as const), id: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), status: faker.helpers.arrayElement(['accepted', 'expired', 'pending'] as const), invited_at: faker.number.int({ min: undefined, max: undefined }), expires_at: faker.number.int({ min: undefined, max: undefined }), accepted_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), projects: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['member', 'owner'] as const), undefined]) })), undefined]) })), first_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), last_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), has_more: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse })

export const getInviteUserResponseMock = (overrideResponse: Partial< Invite > = {}): Invite => ({ object: faker.helpers.arrayElement(['organization.invite'] as const), id: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), status: faker.helpers.arrayElement(['accepted', 'expired', 'pending'] as const), invited_at: faker.number.int({ min: undefined, max: undefined }), expires_at: faker.number.int({ min: undefined, max: undefined }), accepted_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), projects: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['member', 'owner'] as const), undefined]) })), undefined]), ...overrideResponse })

export const getRetrieveInviteResponseMock = (overrideResponse: Partial< Invite > = {}): Invite => ({ object: faker.helpers.arrayElement(['organization.invite'] as const), id: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), status: faker.helpers.arrayElement(['accepted', 'expired', 'pending'] as const), invited_at: faker.number.int({ min: undefined, max: undefined }), expires_at: faker.number.int({ min: undefined, max: undefined }), accepted_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), projects: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['member', 'owner'] as const), undefined]) })), undefined]), ...overrideResponse })

export const getDeleteInviteResponseMock = (overrideResponse: Partial< InviteDeleteResponse > = {}): InviteDeleteResponse => ({ object: faker.helpers.arrayElement(['organization.invite.deleted'] as const), id: faker.string.alpha(20), deleted: faker.datatype.boolean(), ...overrideResponse })

export function getListInvitesMockHandler(overrideResponse?: InviteListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InviteListResponse> | InviteListResponse)) {
  return http.get('*/organization/invites', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListInvitesResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getInviteUserMockHandler(overrideResponse?: Invite | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Invite> | Invite)) {
  return http.post('*/organization/invites', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getInviteUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getRetrieveInviteMockHandler(overrideResponse?: Invite | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Invite> | Invite)) {
  return http.get('*/organization/invites/:inviteId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getRetrieveInviteResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteInviteMockHandler(overrideResponse?: InviteDeleteResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<InviteDeleteResponse> | InviteDeleteResponse)) {
  return http.delete('*/organization/invites/:inviteId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteInviteResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getInvitesMock() {
  return [
    getListInvitesMockHandler(),
    getInviteUserMockHandler(),
    getRetrieveInviteMockHandler(),
    getDeleteInviteMockHandler(),
  ]
}
