/* eslint-disable ts/explicit-function-return-type */

import type {
    AxiosRequestConfig,
    AxiosResponse,
} from 'axios'
import type {
    Invite,
    InviteDeleteResponse,
    InviteListResponse,
    InviteRequest,
    ListInvitesParams,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getInvites() {
/**
 * @summary Returns a list of invites in the organization.
 */
    const listInvites = <TData = AxiosResponse<InviteListResponse>>(
        params?: ListInvitesParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/invites`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
     */
    const inviteUser = <TData = AxiosResponse<Invite>>(
        inviteRequest: InviteRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/invites`,
            inviteRequest,
            options,
        )
    }
    /**
     * @summary Retrieves an invite.
     */
    const retrieveInvite = <TData = AxiosResponse<Invite>>(
        inviteId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/invites/${inviteId}`,
            options,
        )
    }
    /**
     * @summary Delete an invite. If the invite has already been accepted, it cannot be deleted.
     */
    const deleteInvite = <TData = AxiosResponse<InviteDeleteResponse>>(
        inviteId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.delete(
            `http://localhost:3000/v1/organization/invites/${inviteId}`,
            options,
        )
    }
    return {
        listInvites,
        inviteUser,
        retrieveInvite,
        deleteInvite,
    }
}
export type ListInvitesResult = AxiosResponse<InviteListResponse>
export type InviteUserResult = AxiosResponse<Invite>
export type RetrieveInviteResult = AxiosResponse<Invite>
export type DeleteInviteResult = AxiosResponse<InviteDeleteResponse>
