/* eslint-disable ts/explicit-function-return-type */

import type {
  DeleteModelResponse,
  ListModelsResponse,
  Model,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getListModelsResponseMock = (overrideResponse: Partial< ListModelsResponse > = {}): ListModelsResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), created: faker.number.int({ min: undefined, max: undefined }), object: faker.helpers.arrayElement(['model'] as const), owned_by: faker.string.alpha(20) })), ...overrideResponse })

export const getRetrieveModelResponseMock = (overrideResponse: Partial< Model > = {}): Model => ({ id: faker.string.alpha(20), created: faker.number.int({ min: undefined, max: undefined }), object: faker.helpers.arrayElement(['model'] as const), owned_by: faker.string.alpha(20), ...overrideResponse })

export const getDeleteModelResponseMock = (overrideResponse: Partial< DeleteModelResponse > = {}): DeleteModelResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.string.alpha(20), ...overrideResponse })

export function getListModelsMockHandler(overrideResponse?: ListModelsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListModelsResponse> | ListModelsResponse)) {
  return http.get('*/models', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListModelsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getRetrieveModelMockHandler(overrideResponse?: Model | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Model> | Model)) {
  return http.get('*/models/:model', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getRetrieveModelResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteModelMockHandler(overrideResponse?: DeleteModelResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteModelResponse> | DeleteModelResponse)) {
  return http.delete('*/models/:model', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteModelResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getModelsMock() {
  return [
    getListModelsMockHandler(),
    getRetrieveModelMockHandler(),
    getDeleteModelMockHandler(),
  ]
}
