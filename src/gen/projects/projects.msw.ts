/* eslint-disable ts/explicit-function-return-type */

import type {
    Project,
    ProjectApiKey,
    ProjectApiKeyDeleteResponse,
    ProjectApiKeyListResponse,
    ProjectListResponse,
    ProjectRateLimit,
    ProjectRateLimitListResponse,
    ProjectServiceAccount,
    ProjectServiceAccountCreateResponse,
    ProjectServiceAccountDeleteResponse,
    ProjectServiceAccountListResponse,
    ProjectUser,
    ProjectUserDeleteResponse,
    ProjectUserListResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export const getListProjectsResponseMock = (overrideResponse: Partial< ProjectListResponse > = {}): ProjectListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['organization.project'] as const), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), archived_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), status: faker.helpers.arrayElement(['active', 'archived'] as const) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getCreateProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['organization.project'] as const), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), archived_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), status: faker.helpers.arrayElement(['active', 'archived'] as const), ...overrideResponse })

export const getRetrieveProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['organization.project'] as const), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), archived_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), status: faker.helpers.arrayElement(['active', 'archived'] as const), ...overrideResponse })

export const getModifyProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['organization.project'] as const), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), archived_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), status: faker.helpers.arrayElement(['active', 'archived'] as const), ...overrideResponse })

export const getListProjectApiKeysResponseMock = (overrideResponse: Partial< ProjectApiKeyListResponse > = {}): ProjectApiKeyListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['organization.project.api_key'] as const), redacted_value: faker.string.alpha(20), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), id: faker.string.alpha(20), owner: { type: faker.helpers.arrayElement([faker.helpers.arrayElement(['user', 'service_account'] as const), undefined]), user: faker.helpers.arrayElement([{ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }) }, undefined]), service_account: faker.helpers.arrayElement([{ object: faker.helpers.arrayElement(['organization.project.service_account'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), created_at: faker.number.int({ min: undefined, max: undefined }) }, undefined]) } })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getRetrieveProjectApiKeyResponseMock = (overrideResponse: Partial< ProjectApiKey > = {}): ProjectApiKey => ({ object: faker.helpers.arrayElement(['organization.project.api_key'] as const), redacted_value: faker.string.alpha(20), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), id: faker.string.alpha(20), owner: { type: faker.helpers.arrayElement([faker.helpers.arrayElement(['user', 'service_account'] as const), undefined]), user: faker.helpers.arrayElement([{ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }) }, undefined]), service_account: faker.helpers.arrayElement([{ object: faker.helpers.arrayElement(['organization.project.service_account'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), created_at: faker.number.int({ min: undefined, max: undefined }) }, undefined]) }, ...overrideResponse })

export const getDeleteProjectApiKeyResponseMock = (overrideResponse: Partial< ProjectApiKeyDeleteResponse > = {}): ProjectApiKeyDeleteResponse => ({ object: faker.helpers.arrayElement(['organization.project.api_key.deleted'] as const), id: faker.string.alpha(20), deleted: faker.datatype.boolean(), ...overrideResponse })

export const getArchiveProjectResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['organization.project'] as const), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), archived_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), status: faker.helpers.arrayElement(['active', 'archived'] as const), ...overrideResponse })

export const getListProjectRateLimitsResponseMock = (overrideResponse: Partial< ProjectRateLimitListResponse > = {}): ProjectRateLimitListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['project.rate_limit'] as const), id: faker.string.alpha(20), model: faker.string.alpha(20), max_requests_per_1_minute: faker.number.int({ min: undefined, max: undefined }), max_tokens_per_1_minute: faker.number.int({ min: undefined, max: undefined }), max_images_per_1_minute: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), max_audio_megabytes_per_1_minute: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), max_requests_per_1_day: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), batch_1_day_max_input_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getUpdateProjectRateLimitsResponseMock = (overrideResponse: Partial< ProjectRateLimit > = {}): ProjectRateLimit => ({ object: faker.helpers.arrayElement(['project.rate_limit'] as const), id: faker.string.alpha(20), model: faker.string.alpha(20), max_requests_per_1_minute: faker.number.int({ min: undefined, max: undefined }), max_tokens_per_1_minute: faker.number.int({ min: undefined, max: undefined }), max_images_per_1_minute: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), max_audio_megabytes_per_1_minute: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), max_requests_per_1_day: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), batch_1_day_max_input_tokens: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), ...overrideResponse })

export const getListProjectServiceAccountsResponseMock = (overrideResponse: Partial< ProjectServiceAccountListResponse > = {}): ProjectServiceAccountListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['organization.project.service_account'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), created_at: faker.number.int({ min: undefined, max: undefined }) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getCreateProjectServiceAccountResponseMock = (overrideResponse: Partial< ProjectServiceAccountCreateResponse > = {}): ProjectServiceAccountCreateResponse => ({ object: faker.helpers.arrayElement(['organization.project.service_account'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['member'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), api_key: { object: faker.helpers.arrayElement(['organization.project.service_account.api_key'] as const), value: faker.string.alpha(20), name: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), id: faker.string.alpha(20) }, ...overrideResponse })

export const getRetrieveProjectServiceAccountResponseMock = (overrideResponse: Partial< ProjectServiceAccount > = {}): ProjectServiceAccount => ({ object: faker.helpers.arrayElement(['organization.project.service_account'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getDeleteProjectServiceAccountResponseMock = (overrideResponse: Partial< ProjectServiceAccountDeleteResponse > = {}): ProjectServiceAccountDeleteResponse => ({ object: faker.helpers.arrayElement(['organization.project.service_account.deleted'] as const), id: faker.string.alpha(20), deleted: faker.datatype.boolean(), ...overrideResponse })

export const getListProjectUsersResponseMock = (overrideResponse: Partial< ProjectUserListResponse > = {}): ProjectUserListResponse => ({ object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getCreateProjectUserResponseMock = (overrideResponse: Partial< ProjectUser > = {}): ProjectUser => ({ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getRetrieveProjectUserResponseMock = (overrideResponse: Partial< ProjectUser > = {}): ProjectUser => ({ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getModifyProjectUserResponseMock = (overrideResponse: Partial< ProjectUser > = {}): ProjectUser => ({ object: faker.helpers.arrayElement(['organization.project.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'member'] as const), added_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getDeleteProjectUserResponseMock = (overrideResponse: Partial< ProjectUserDeleteResponse > = {}): ProjectUserDeleteResponse => ({ object: faker.helpers.arrayElement(['organization.project.user.deleted'] as const), id: faker.string.alpha(20), deleted: faker.datatype.boolean(), ...overrideResponse })

export function getListProjectsMockHandler(overrideResponse?: ProjectListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectListResponse> | ProjectListResponse)) {
    return http.get('*/organization/projects', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListProjectsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getCreateProjectMockHandler(overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Project> | Project)) {
    return http.post('*/organization/projects', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateProjectResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getRetrieveProjectMockHandler(overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Project> | Project)) {
    return http.get('*/organization/projects/:projectId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getRetrieveProjectResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getModifyProjectMockHandler(overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Project> | Project)) {
    return http.post('*/organization/projects/:projectId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getModifyProjectResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getListProjectApiKeysMockHandler(overrideResponse?: ProjectApiKeyListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectApiKeyListResponse> | ProjectApiKeyListResponse)) {
    return http.get('*/organization/projects/:projectId/api_keys', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListProjectApiKeysResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getRetrieveProjectApiKeyMockHandler(overrideResponse?: ProjectApiKey | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectApiKey> | ProjectApiKey)) {
    return http.get('*/organization/projects/:projectId/api_keys/:keyId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getRetrieveProjectApiKeyResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getDeleteProjectApiKeyMockHandler(overrideResponse?: ProjectApiKeyDeleteResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ProjectApiKeyDeleteResponse> | ProjectApiKeyDeleteResponse)) {
    return http.delete('*/organization/projects/:projectId/api_keys/:keyId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getDeleteProjectApiKeyResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getArchiveProjectMockHandler(overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Project> | Project)) {
    return http.post('*/organization/projects/:projectId/archive', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getArchiveProjectResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getListProjectRateLimitsMockHandler(overrideResponse?: ProjectRateLimitListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectRateLimitListResponse> | ProjectRateLimitListResponse)) {
    return http.get('*/organization/projects/:projectId/rate_limits', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListProjectRateLimitsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getUpdateProjectRateLimitsMockHandler(overrideResponse?: ProjectRateLimit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProjectRateLimit> | ProjectRateLimit)) {
    return http.post('*/organization/projects/:projectId/rate_limits/:rateLimitId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUpdateProjectRateLimitsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getListProjectServiceAccountsMockHandler(overrideResponse?: ProjectServiceAccountListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectServiceAccountListResponse> | ProjectServiceAccountListResponse)) {
    return http.get('*/organization/projects/:projectId/service_accounts', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListProjectServiceAccountsResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getCreateProjectServiceAccountMockHandler(overrideResponse?: ProjectServiceAccountCreateResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProjectServiceAccountCreateResponse> | ProjectServiceAccountCreateResponse)) {
    return http.post('*/organization/projects/:projectId/service_accounts', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateProjectServiceAccountResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getRetrieveProjectServiceAccountMockHandler(overrideResponse?: ProjectServiceAccount | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectServiceAccount> | ProjectServiceAccount)) {
    return http.get('*/organization/projects/:projectId/service_accounts/:serviceAccountId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getRetrieveProjectServiceAccountResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getDeleteProjectServiceAccountMockHandler(overrideResponse?: ProjectServiceAccountDeleteResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ProjectServiceAccountDeleteResponse> | ProjectServiceAccountDeleteResponse)) {
    return http.delete('*/organization/projects/:projectId/service_accounts/:serviceAccountId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getDeleteProjectServiceAccountResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getListProjectUsersMockHandler(overrideResponse?: ProjectUserListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectUserListResponse> | ProjectUserListResponse)) {
    return http.get('*/organization/projects/:projectId/users', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getListProjectUsersResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getCreateProjectUserMockHandler(overrideResponse?: ProjectUser | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProjectUser> | ProjectUser)) {
    return http.post('*/organization/projects/:projectId/users', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateProjectUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getRetrieveProjectUserMockHandler(overrideResponse?: ProjectUser | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProjectUser> | ProjectUser)) {
    return http.get('*/organization/projects/:projectId/users/:userId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getRetrieveProjectUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getModifyProjectUserMockHandler(overrideResponse?: ProjectUser | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProjectUser> | ProjectUser)) {
    return http.post('*/organization/projects/:projectId/users/:userId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getModifyProjectUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getDeleteProjectUserMockHandler(overrideResponse?: ProjectUserDeleteResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<ProjectUserDeleteResponse> | ProjectUserDeleteResponse)) {
    return http.delete('*/organization/projects/:projectId/users/:userId', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getDeleteProjectUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}
export function getProjectsMock() {
    return [
        getListProjectsMockHandler(),
        getCreateProjectMockHandler(),
        getRetrieveProjectMockHandler(),
        getModifyProjectMockHandler(),
        getListProjectApiKeysMockHandler(),
        getRetrieveProjectApiKeyMockHandler(),
        getDeleteProjectApiKeyMockHandler(),
        getArchiveProjectMockHandler(),
        getListProjectRateLimitsMockHandler(),
        getUpdateProjectRateLimitsMockHandler(),
        getListProjectServiceAccountsMockHandler(),
        getCreateProjectServiceAccountMockHandler(),
        getRetrieveProjectServiceAccountMockHandler(),
        getDeleteProjectServiceAccountMockHandler(),
        getListProjectUsersMockHandler(),
        getCreateProjectUserMockHandler(),
        getRetrieveProjectUserMockHandler(),
        getModifyProjectUserMockHandler(),
        getDeleteProjectUserMockHandler(),
    ]
}
