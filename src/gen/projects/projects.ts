/* eslint-disable ts/explicit-function-return-type */

import type {
    AxiosRequestConfig,
    AxiosResponse,
} from 'axios'
import type {
    ListProjectApiKeysParams,
    ListProjectRateLimitsParams,
    ListProjectServiceAccountsParams,
    ListProjectsParams,
    ListProjectUsersParams,
    Project,
    ProjectApiKey,
    ProjectApiKeyDeleteResponse,
    ProjectApiKeyListResponse,
    ProjectCreateRequest,
    ProjectListResponse,
    ProjectRateLimit,
    ProjectRateLimitListResponse,
    ProjectRateLimitUpdateRequest,
    ProjectServiceAccount,
    ProjectServiceAccountCreateRequest,
    ProjectServiceAccountCreateResponse,
    ProjectServiceAccountDeleteResponse,
    ProjectServiceAccountListResponse,
    ProjectUpdateRequest,
    ProjectUser,
    ProjectUserCreateRequest,
    ProjectUserDeleteResponse,
    ProjectUserListResponse,
    ProjectUserUpdateRequest,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getProjects() {
/**
 * @summary Returns a list of projects.
 */
    const listProjects = <TData = AxiosResponse<ProjectListResponse>>(
        params?: ListProjectsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     */
    const createProject = <TData = AxiosResponse<Project>>(
        projectCreateRequest: ProjectCreateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects`,
            projectCreateRequest,
            options,
        )
    }
    /**
     * @summary Retrieves a project.
     */
    const retrieveProject = <TData = AxiosResponse<Project>>(
        projectId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}`,
            options,
        )
    }
    /**
     * @summary Modifies a project in the organization.
     */
    const modifyProject = <TData = AxiosResponse<Project>>(
        projectId: string,
        projectUpdateRequest: ProjectUpdateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}`,
            projectUpdateRequest,
            options,
        )
    }
    /**
     * @summary Returns a list of API keys in the project.
     */
    const listProjectApiKeys = <TData = AxiosResponse<ProjectApiKeyListResponse>>(
        projectId: string,
        params?: ListProjectApiKeysParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/api_keys`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Retrieves an API key in the project.
     */
    const retrieveProjectApiKey = <TData = AxiosResponse<ProjectApiKey>>(
        projectId: string,
        keyId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/api_keys/${keyId}`,
            options,
        )
    }
    /**
     * @summary Deletes an API key from the project.
     */
    const deleteProjectApiKey = <TData = AxiosResponse<ProjectApiKeyDeleteResponse>>(
        projectId: string,
        keyId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.delete(
            `http://localhost:3000/v1/organization/projects/${projectId}/api_keys/${keyId}`,
            options,
        )
    }
    /**
     * @summary Archives a project in the organization. Archived projects cannot be used or updated.
     */
    const archiveProject = <TData = AxiosResponse<Project>>(
        projectId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}/archive`,
            undefined,
            options,
        )
    }
    /**
     * @summary Returns the rate limits per model for a project.
     */
    const listProjectRateLimits = <TData = AxiosResponse<ProjectRateLimitListResponse>>(
        projectId: string,
        params?: ListProjectRateLimitsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/rate_limits`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Updates a project rate limit.
     */
    const updateProjectRateLimits = <TData = AxiosResponse<ProjectRateLimit>>(
        projectId: string,
        rateLimitId: string,
        projectRateLimitUpdateRequest: ProjectRateLimitUpdateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}/rate_limits/${rateLimitId}`,
            projectRateLimitUpdateRequest,
            options,
        )
    }
    /**
     * @summary Returns a list of service accounts in the project.
     */
    const listProjectServiceAccounts = <TData = AxiosResponse<ProjectServiceAccountListResponse>>(
        projectId: string,
        params?: ListProjectServiceAccountsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/service_accounts`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Creates a new service account in the project. This also returns an unredacted API key for the service account.
     */
    const createProjectServiceAccount = <TData = AxiosResponse<ProjectServiceAccountCreateResponse>>(
        projectId: string,
        projectServiceAccountCreateRequest: ProjectServiceAccountCreateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}/service_accounts`,
            projectServiceAccountCreateRequest,
            options,
        )
    }
    /**
     * @summary Retrieves a service account in the project.
     */
    const retrieveProjectServiceAccount = <TData = AxiosResponse<ProjectServiceAccount>>(
        projectId: string,
        serviceAccountId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/service_accounts/${serviceAccountId}`,
            options,
        )
    }
    /**
     * @summary Deletes a service account from the project.
     */
    const deleteProjectServiceAccount = <TData = AxiosResponse<ProjectServiceAccountDeleteResponse>>(
        projectId: string,
        serviceAccountId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.delete(
            `http://localhost:3000/v1/organization/projects/${projectId}/service_accounts/${serviceAccountId}`,
            options,
        )
    }
    /**
     * @summary Returns a list of users in the project.
     */
    const listProjectUsers = <TData = AxiosResponse<ProjectUserListResponse>>(
        projectId: string,
        params?: ListProjectUsersParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/users`,
            {
                ...options,
                params: {
                    ...params,
                    ...options?.params,
                },
            },
        )
    }
    /**
     * @summary Adds a user to the project. Users must already be members of the organization to be added to a project.
     */
    const createProjectUser = <TData = AxiosResponse<ProjectUser>>(
        projectId: string,
        projectUserCreateRequest: ProjectUserCreateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}/users`,
            projectUserCreateRequest,
            options,
        )
    }
    /**
     * @summary Retrieves a user in the project.
     */
    const retrieveProjectUser = <TData = AxiosResponse<ProjectUser>>(
        projectId: string,
        userId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/projects/${projectId}/users/${userId}`,
            options,
        )
    }
    /**
     * @summary Modifies a user's role in the project.
     */
    const modifyProjectUser = <TData = AxiosResponse<ProjectUser>>(
        projectId: string,
        userId: string,
        projectUserUpdateRequest: ProjectUserUpdateRequest,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.post(
            `http://localhost:3000/v1/organization/projects/${projectId}/users/${userId}`,
            projectUserUpdateRequest,
            options,
        )
    }
    /**
     * @summary Deletes a user from the project.
     */
    const deleteProjectUser = <TData = AxiosResponse<ProjectUserDeleteResponse>>(
        projectId: string,
        userId: string,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.delete(
            `http://localhost:3000/v1/organization/projects/${projectId}/users/${userId}`,
            options,
        )
    }
    return {
        listProjects,
        createProject,
        retrieveProject,
        modifyProject,
        listProjectApiKeys,
        retrieveProjectApiKey,
        deleteProjectApiKey,
        archiveProject,
        listProjectRateLimits,
        updateProjectRateLimits,
        listProjectServiceAccounts,
        createProjectServiceAccount,
        retrieveProjectServiceAccount,
        deleteProjectServiceAccount,
        listProjectUsers,
        createProjectUser,
        retrieveProjectUser,
        modifyProjectUser,
        deleteProjectUser,
    }
}
export type ListProjectsResult = AxiosResponse<ProjectListResponse>
export type CreateProjectResult = AxiosResponse<Project>
export type RetrieveProjectResult = AxiosResponse<Project>
export type ModifyProjectResult = AxiosResponse<Project>
export type ListProjectApiKeysResult = AxiosResponse<ProjectApiKeyListResponse>
export type RetrieveProjectApiKeyResult = AxiosResponse<ProjectApiKey>
export type DeleteProjectApiKeyResult = AxiosResponse<ProjectApiKeyDeleteResponse>
export type ArchiveProjectResult = AxiosResponse<Project>
export type ListProjectRateLimitsResult = AxiosResponse<ProjectRateLimitListResponse>
export type UpdateProjectRateLimitsResult = AxiosResponse<ProjectRateLimit>
export type ListProjectServiceAccountsResult = AxiosResponse<ProjectServiceAccountListResponse>
export type CreateProjectServiceAccountResult = AxiosResponse<ProjectServiceAccountCreateResponse>
export type RetrieveProjectServiceAccountResult = AxiosResponse<ProjectServiceAccount>
export type DeleteProjectServiceAccountResult = AxiosResponse<ProjectServiceAccountDeleteResponse>
export type ListProjectUsersResult = AxiosResponse<ProjectUserListResponse>
export type CreateProjectUserResult = AxiosResponse<ProjectUser>
export type RetrieveProjectUserResult = AxiosResponse<ProjectUser>
export type ModifyProjectUserResult = AxiosResponse<ProjectUser>
export type DeleteProjectUserResult = AxiosResponse<ProjectUserDeleteResponse>
