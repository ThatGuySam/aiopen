/* eslint-disable ts/explicit-function-return-type */

import type {
    RealtimeSessionCreateResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export const getCreateRealtimeSessionResponseMock = (overrideResponse: Partial< RealtimeSessionCreateResponse > = {}): RealtimeSessionCreateResponse => ({ client_secret: { value: faker.string.alpha(20), expires_at: faker.number.int({ min: undefined, max: undefined }) }, modalities: faker.helpers.arrayElement([faker.helpers.arrayElements(['text', 'audio'] as const), undefined]), instructions: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), voice: faker.helpers.arrayElement([faker.helpers.arrayElement(['alloy', 'ash', 'ballad', 'coral', 'echo', 'sage', 'shimmer', 'verse'] as const), undefined]), input_audio_format: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), output_audio_format: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), input_audio_transcription: faker.helpers.arrayElement([{ model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]), turn_detection: faker.helpers.arrayElement([{ type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), threshold: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), prefix_padding_ms: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), silence_duration_ms: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]) }, undefined]), tools: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ type: faker.helpers.arrayElement([faker.helpers.arrayElement(['function'] as const), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parameters: faker.helpers.arrayElement([{}, undefined]) })), undefined]), tool_choice: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), temperature: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]), max_response_output_tokens: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), faker.helpers.arrayElement(['inf'] as const)]), undefined]), ...overrideResponse })

export function getCreateRealtimeSessionMockHandler(overrideResponse?: RealtimeSessionCreateResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RealtimeSessionCreateResponse> | RealtimeSessionCreateResponse)) {
    return http.post('*/realtime/sessions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateRealtimeSessionResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}
export function getRealtimeMock() {
    return [
        getCreateRealtimeSessionMockHandler(),
    ]
}
