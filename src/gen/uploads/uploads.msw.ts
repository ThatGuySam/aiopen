/* eslint-disable ts/explicit-function-return-type */

import type {
    Upload,
    UploadPart,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export const getCreateUploadResponseMock = (overrideResponse: Partial< Upload > = {}): Upload => ({ id: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), purpose: faker.string.alpha(20), status: faker.helpers.arrayElement(['pending', 'completed', 'cancelled', 'expired'] as const), expires_at: faker.number.int({ min: undefined, max: undefined }), object: faker.helpers.arrayElement([faker.helpers.arrayElement(['upload'] as const), undefined]), file: faker.helpers.arrayElement([{ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]), ...overrideResponse })

export const getCancelUploadResponseMock = (overrideResponse: Partial< Upload > = {}): Upload => ({ id: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), purpose: faker.string.alpha(20), status: faker.helpers.arrayElement(['pending', 'completed', 'cancelled', 'expired'] as const), expires_at: faker.number.int({ min: undefined, max: undefined }), object: faker.helpers.arrayElement([faker.helpers.arrayElement(['upload'] as const), undefined]), file: faker.helpers.arrayElement([{ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]), ...overrideResponse })

export const getCompleteUploadResponseMock = (overrideResponse: Partial< Upload > = {}): Upload => ({ id: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), purpose: faker.string.alpha(20), status: faker.helpers.arrayElement(['pending', 'completed', 'cancelled', 'expired'] as const), expires_at: faker.number.int({ min: undefined, max: undefined }), object: faker.helpers.arrayElement([faker.helpers.arrayElement(['upload'] as const), undefined]), file: faker.helpers.arrayElement([{ id: faker.string.alpha(20), bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), filename: faker.string.alpha(20), object: faker.helpers.arrayElement(['file'] as const), purpose: faker.helpers.arrayElement(['assistants', 'assistants_output', 'batch', 'batch_output', 'fine-tune', 'fine-tune-results', 'vision'] as const), status: faker.helpers.arrayElement(['uploaded', 'processed', 'error'] as const), status_details: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) }, undefined]), ...overrideResponse })

export const getAddUploadPartResponseMock = (overrideResponse: Partial< UploadPart > = {}): UploadPart => ({ id: faker.string.alpha(20), created_at: faker.number.int({ min: undefined, max: undefined }), upload_id: faker.string.alpha(20), object: faker.helpers.arrayElement(['upload.part'] as const), ...overrideResponse })

export function getCreateUploadMockHandler(overrideResponse?: Upload | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Upload> | Upload)) {
    return http.post('*/uploads', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCreateUploadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getCancelUploadMockHandler(overrideResponse?: Upload | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Upload> | Upload)) {
    return http.post('*/uploads/:uploadId/cancel', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCancelUploadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getCompleteUploadMockHandler(overrideResponse?: Upload | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Upload> | Upload)) {
    return http.post('*/uploads/:uploadId/complete', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getCompleteUploadResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}

export function getAddUploadPartMockHandler(overrideResponse?: UploadPart | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UploadPart> | UploadPart)) {
    return http.post('*/uploads/:uploadId/parts', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getAddUploadPartResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
        })
    })
}
export function getUploadsMock() {
    return [
        getCreateUploadMockHandler(),
        getCancelUploadMockHandler(),
        getCompleteUploadMockHandler(),
        getAddUploadPartMockHandler(),
    ]
}
