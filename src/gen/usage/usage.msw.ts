/* eslint-disable ts/explicit-function-return-type */

import type {
    CostsResult,
    UsageAudioSpeechesResult,
    UsageAudioTranscriptionsResult,
    UsageCodeInterpreterSessionsResult,
    UsageCompletionsResult,
    UsageEmbeddingsResult,
    UsageImagesResult,
    UsageModerationsResult,
    UsageResponse,
    UsageVectorStoresResult,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
    faker,
} from '@faker-js/faker'
import {
    delay,
    http,
    HttpResponse,
} from 'msw'

export function getUsageCostsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCostsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageCostsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageCostsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageCostsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioSpeechesResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageAudioSpeechesResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageAudioSpeechesResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageAudioTranscriptionsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageAudioTranscriptionsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageAudioTranscriptionsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCodeInterpreterSessionsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageCodeInterpreterSessionsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageCompletionsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageCompletionsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageCompletionsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageCompletionsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageEmbeddingsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageEmbeddingsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageEmbeddingsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageImagesResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageImagesResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageImagesResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageImagesResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageModerationsResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageModerationsResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageModerationsResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageModerationsResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageCompletionsResultMock(overrideResponse: Partial<UsageCompletionsResult> = {}): UsageCompletionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.completions.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_cached_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            input_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            output_audio_tokens: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            batch: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageEmbeddingsResultMock(overrideResponse: Partial<UsageEmbeddingsResult> = {}): UsageEmbeddingsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.embeddings.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageModerationsResultMock(overrideResponse: Partial<UsageModerationsResult> = {}): UsageModerationsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.moderations.result'] as const),
            input_tokens: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageImagesResultMock(overrideResponse: Partial<UsageImagesResult> = {}): UsageImagesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.images.result'] as const),
            images: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            source: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            size: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageAudioSpeechesResultMock(overrideResponse: Partial<UsageAudioSpeechesResult> = {}): UsageAudioSpeechesResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_speeches.result'] as const),
            characters: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageAudioTranscriptionsResultMock(overrideResponse: Partial<UsageAudioTranscriptionsResult> = {}): UsageAudioTranscriptionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.audio_transcriptions.result'] as const),
            seconds: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            num_model_requests: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            user_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            api_key_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            model: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageVectorStoresResultMock(overrideResponse: Partial<UsageVectorStoresResult> = {}): UsageVectorStoresResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.vector_stores.result'] as const),
            usage_bytes: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseUsageCodeInterpreterSessionsResultMock(overrideResponse: Partial<UsageCodeInterpreterSessionsResult> = {}): UsageCodeInterpreterSessionsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.usage.code_interpreter_sessions.result'] as const),
            num_sessions: faker.helpers.arrayElement([
                faker.number.int({
                    min: undefined,
                    max: undefined,
                }),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseCostsResultMock(overrideResponse: Partial<CostsResult> = {}): CostsResult {
    return {
        ...{
            object: faker.helpers.arrayElement(['organization.costs.result'] as const),
            amount: faker.helpers.arrayElement([
                {
                    value: faker.helpers.arrayElement([
                        faker.number.int({
                            min: undefined,
                            max: undefined,
                        }),
                        undefined,
                    ]),
                    currency: faker.helpers.arrayElement([
                        faker.string.alpha(20),
                        undefined,
                    ]),
                },
                undefined,
            ]),
            line_item: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
            project_id: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                    faker.string.alpha(20),
                    null,
                ]),
                undefined,
            ]),
        },
        ...overrideResponse,
    }
}

export function getUsageVectorStoresResponseMock(overrideResponse: Partial< UsageResponse > = {}): UsageResponse {
    return {
        object: faker.helpers.arrayElement(['page'] as const),
        data: Array.from({
            length: faker.number.int({
                min: 1,
                max: 10,
            }),
        }, (_, i) => i + 1).map(() => ({
            object: faker.helpers.arrayElement(['bucket'] as const),
            start_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            end_time: faker.number.int({
                min: undefined,
                max: undefined,
            }),
            result: Array.from({
                length: faker.number.int({
                    min: 1,
                    max: 10,
                }),
            }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([
                {
                    ...getUsageVectorStoresResponseUsageCompletionsResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageEmbeddingsResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageModerationsResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageImagesResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageAudioSpeechesResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageAudioTranscriptionsResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageVectorStoresResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseUsageCodeInterpreterSessionsResultMock(),
                },
                {
                    ...getUsageVectorStoresResponseCostsResultMock(),
                },
            ]))),
        })),
        has_more: faker.datatype.boolean(),
        next_page: faker.string.alpha(20),
        ...overrideResponse,
    }
}

export function getUsageCostsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/costs', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageCostsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageAudioSpeechesMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/audio_speeches', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageAudioSpeechesResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageAudioTranscriptionsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/audio_transcriptions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageAudioTranscriptionsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageCodeInterpreterSessionsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/code_interpreter_sessions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageCodeInterpreterSessionsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageCompletionsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/completions', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageCompletionsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageEmbeddingsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/embeddings', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageEmbeddingsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageImagesMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/images', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageImagesResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageModerationsMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/moderations', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageModerationsResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}

export function getUsageVectorStoresMockHandler(overrideResponse?: UsageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsageResponse> | UsageResponse)) {
    return http.get('*/organization/usage/vector_stores', async (info) => {
        await delay(1000)

        return new HttpResponse(JSON.stringify(overrideResponse !== undefined
            ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
            : getUsageVectorStoresResponseMock()), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        })
    })
}
export function getUsageMock() {
    return [
        getUsageCostsMockHandler(),
        getUsageAudioSpeechesMockHandler(),
        getUsageAudioTranscriptionsMockHandler(),
        getUsageCodeInterpreterSessionsMockHandler(),
        getUsageCompletionsMockHandler(),
        getUsageEmbeddingsMockHandler(),
        getUsageImagesMockHandler(),
        getUsageModerationsMockHandler(),
        getUsageVectorStoresMockHandler(),
    ]
}
