/* eslint-disable ts/explicit-function-return-type */

import type {
    AxiosRequestConfig,
    AxiosResponse,
} from 'axios'
import type {
    UsageAudioSpeechesParams,
    UsageAudioTranscriptionsParams,
    UsageCodeInterpreterSessionsParams,
    UsageCompletionsParams,
    UsageCostsParams,
    UsageEmbeddingsParams,
    UsageImagesParams,
    UsageModerationsParams,
    UsageResponse,
    UsageVectorStoresParams,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getUsage() {
/**
 * @summary Get costs details for the organization.
 */
    const usageCosts = <TData = AxiosResponse<UsageResponse>>(
        params: UsageCostsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/costs`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get audio speeches usage details for the organization.
     */
    const usageAudioSpeeches = <TData = AxiosResponse<UsageResponse>>(
        params: UsageAudioSpeechesParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/audio_speeches`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get audio transcriptions usage details for the organization.
     */
    const usageAudioTranscriptions = <TData = AxiosResponse<UsageResponse>>(
        params: UsageAudioTranscriptionsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/audio_transcriptions`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get code interpreter sessions usage details for the organization.
     */
    const usageCodeInterpreterSessions = <TData = AxiosResponse<UsageResponse>>(
        params: UsageCodeInterpreterSessionsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/code_interpreter_sessions`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get completions usage details for the organization.
     */
    const usageCompletions = <TData = AxiosResponse<UsageResponse>>(
        params: UsageCompletionsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/completions`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get embeddings usage details for the organization.
     */
    const usageEmbeddings = <TData = AxiosResponse<UsageResponse>>(
        params: UsageEmbeddingsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/embeddings`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get images usage details for the organization.
     */
    const usageImages = <TData = AxiosResponse<UsageResponse>>(
        params: UsageImagesParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/images`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get moderations usage details for the organization.
     */
    const usageModerations = <TData = AxiosResponse<UsageResponse>>(
        params: UsageModerationsParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/moderations`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    /**
     * @summary Get vector stores usage details for the organization.
     */
    const usageVectorStores = <TData = AxiosResponse<UsageResponse>>(
        params: UsageVectorStoresParams,
        options?: AxiosRequestConfig,
    ): Promise<TData> => {
        return axios.get(
            `http://localhost:3000/v1/organization/usage/vector_stores`,
            {
                ...options,
                params: { ...params, ...options?.params },
            },
        )
    }
    return { usageCosts, usageAudioSpeeches, usageAudioTranscriptions, usageCodeInterpreterSessions, usageCompletions, usageEmbeddings, usageImages, usageModerations, usageVectorStores }
}
export type UsageCostsResult = AxiosResponse<UsageResponse>
export type UsageAudioSpeechesResult = AxiosResponse<UsageResponse>
export type UsageAudioTranscriptionsResult = AxiosResponse<UsageResponse>
export type UsageCodeInterpreterSessionsResult = AxiosResponse<UsageResponse>
export type UsageCompletionsResult = AxiosResponse<UsageResponse>
export type UsageEmbeddingsResult = AxiosResponse<UsageResponse>
export type UsageImagesResult = AxiosResponse<UsageResponse>
export type UsageModerationsResult = AxiosResponse<UsageResponse>
export type UsageVectorStoresResult = AxiosResponse<UsageResponse>
