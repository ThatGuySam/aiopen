/* eslint-disable ts/explicit-function-return-type */

import type {
  User,
  UserDeleteResponse,
  UserListResponse,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export const getListUsersResponseMock = (overrideResponse: Partial< UserListResponse > = {}): UserListResponse => ({ object: faker.helpers.arrayElement(['list'] as const), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ object: faker.helpers.arrayElement(['organization.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), added_at: faker.number.int({ min: undefined, max: undefined }) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getRetrieveUserResponseMock = (overrideResponse: Partial< User > = {}): User => ({ object: faker.helpers.arrayElement(['organization.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), added_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getModifyUserResponseMock = (overrideResponse: Partial< User > = {}): User => ({ object: faker.helpers.arrayElement(['organization.user'] as const), id: faker.string.alpha(20), name: faker.string.alpha(20), email: faker.string.alpha(20), role: faker.helpers.arrayElement(['owner', 'reader'] as const), added_at: faker.number.int({ min: undefined, max: undefined }), ...overrideResponse })

export const getDeleteUserResponseMock = (overrideResponse: Partial< UserDeleteResponse > = {}): UserDeleteResponse => ({ object: faker.helpers.arrayElement(['organization.user.deleted'] as const), id: faker.string.alpha(20), deleted: faker.datatype.boolean(), ...overrideResponse })

export function getListUsersMockHandler(overrideResponse?: UserListResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserListResponse> | UserListResponse)) {
  return http.get('*/organization/users', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListUsersResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getRetrieveUserMockHandler(overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) {
  return http.get('*/organization/users/:userId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getRetrieveUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyUserMockHandler(overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) {
  return http.post('*/organization/users/:userId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteUserMockHandler(overrideResponse?: UserDeleteResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<UserDeleteResponse> | UserDeleteResponse)) {
  return http.delete('*/organization/users/:userId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteUserResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getUsersMock() {
  return [
    getListUsersMockHandler(),
    getRetrieveUserMockHandler(),
    getModifyUserMockHandler(),
    getDeleteUserMockHandler(),
  ]
}
