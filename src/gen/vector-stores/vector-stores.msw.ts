/* eslint-disable ts/explicit-function-return-type */

import type {
  DeleteVectorStoreFileResponse,
  DeleteVectorStoreResponse,
  ListVectorStoreFilesResponse,
  ListVectorStoresResponse,
  OtherChunkingStrategyResponseParam,
  StaticChunkingStrategyResponseParam,
  VectorStoreFileBatchObject,
  VectorStoreFileObject,
  VectorStoreObject,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import {
  faker,
} from '@faker-js/faker'
import {
  delay,
  http,
  HttpResponse,
} from 'msw'

export function getListVectorStoresResponseMock(overrideResponse: Partial< ListVectorStoresResponse > = {}): ListVectorStoresResponse {
  return { object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.string.alpha(20), usage_bytes: faker.number.int({ min: undefined, max: undefined }), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, status: faker.helpers.arrayElement(['expired', 'in_progress', 'completed'] as const), expires_after: faker.helpers.arrayElement([{ anchor: faker.helpers.arrayElement(['last_active_at'] as const), days: faker.number.int({ min: 1, max: 365 }) }, undefined]), expires_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), last_active_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  } })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse }
}

export function getCreateVectorStoreResponseMock(overrideResponse: Partial< VectorStoreObject > = {}): VectorStoreObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.string.alpha(20), usage_bytes: faker.number.int({ min: undefined, max: undefined }), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, status: faker.helpers.arrayElement(['expired', 'in_progress', 'completed'] as const), expires_after: faker.helpers.arrayElement([{ anchor: faker.helpers.arrayElement(['last_active_at'] as const), days: faker.number.int({ min: 1, max: 365 }) }, undefined]), expires_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), last_active_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export function getGetVectorStoreResponseMock(overrideResponse: Partial< VectorStoreObject > = {}): VectorStoreObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.string.alpha(20), usage_bytes: faker.number.int({ min: undefined, max: undefined }), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, status: faker.helpers.arrayElement(['expired', 'in_progress', 'completed'] as const), expires_after: faker.helpers.arrayElement([{ anchor: faker.helpers.arrayElement(['last_active_at'] as const), days: faker.number.int({ min: 1, max: 365 }) }, undefined]), expires_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), last_active_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export function getModifyVectorStoreResponseMock(overrideResponse: Partial< VectorStoreObject > = {}): VectorStoreObject {
  return { id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), name: faker.string.alpha(20), usage_bytes: faker.number.int({ min: undefined, max: undefined }), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, status: faker.helpers.arrayElement(['expired', 'in_progress', 'completed'] as const), expires_after: faker.helpers.arrayElement([{ anchor: faker.helpers.arrayElement(['last_active_at'] as const), days: faker.number.int({ min: 1, max: 365 }) }, undefined]), expires_at: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), undefined]), last_active_at: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]), metadata: {
    [faker.string.alphanumeric(5)]: faker.string.alpha(20),
  }, ...overrideResponse }
}

export const getDeleteVectorStoreResponseMock = (overrideResponse: Partial< DeleteVectorStoreResponse > = {}): DeleteVectorStoreResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.helpers.arrayElement(['vector_store.deleted'] as const), ...overrideResponse })

export const getCreateVectorStoreFileBatchResponseMock = (overrideResponse: Partial< VectorStoreFileBatchObject > = {}): VectorStoreFileBatchObject => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.files_batch'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, ...overrideResponse })

export const getGetVectorStoreFileBatchResponseMock = (overrideResponse: Partial< VectorStoreFileBatchObject > = {}): VectorStoreFileBatchObject => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.files_batch'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, ...overrideResponse })

export const getCancelVectorStoreFileBatchResponseMock = (overrideResponse: Partial< VectorStoreFileBatchObject > = {}): VectorStoreFileBatchObject => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.files_batch'] as const), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), file_counts: { in_progress: faker.number.int({ min: undefined, max: undefined }), completed: faker.number.int({ min: undefined, max: undefined }), failed: faker.number.int({ min: undefined, max: undefined }), cancelled: faker.number.int({ min: undefined, max: undefined }), total: faker.number.int({ min: undefined, max: undefined }) }, ...overrideResponse })

export const getListFilesInVectorStoreBatchResponseStaticChunkingStrategyResponseParamMock = (overrideResponse: Partial<StaticChunkingStrategyResponseParam> = {}): StaticChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['static'] as const), static: { max_chunk_size_tokens: faker.number.int({ min: 100, max: 4096 }), chunk_overlap_tokens: faker.number.int({ min: undefined, max: undefined }) } }, ...overrideResponse })

export const getListFilesInVectorStoreBatchResponseOtherChunkingStrategyResponseParamMock = (overrideResponse: Partial<OtherChunkingStrategyResponseParam> = {}): OtherChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['other'] as const) }, ...overrideResponse })

export const getListFilesInVectorStoreBatchResponseMock = (overrideResponse: Partial< ListVectorStoreFilesResponse > = {}): ListVectorStoreFilesResponse => ({ object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.file'] as const), usage_bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), last_error: { code: faker.helpers.arrayElement(['server_error', 'unsupported_file', 'invalid_file'] as const), message: faker.string.alpha(20) }, chunking_strategy: faker.helpers.arrayElement([faker.helpers.arrayElement([{ ...getListFilesInVectorStoreBatchResponseStaticChunkingStrategyResponseParamMock() }, { ...getListFilesInVectorStoreBatchResponseOtherChunkingStrategyResponseParamMock() }]), undefined]) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getListVectorStoreFilesResponseStaticChunkingStrategyResponseParamMock = (overrideResponse: Partial<StaticChunkingStrategyResponseParam> = {}): StaticChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['static'] as const), static: { max_chunk_size_tokens: faker.number.int({ min: 100, max: 4096 }), chunk_overlap_tokens: faker.number.int({ min: undefined, max: undefined }) } }, ...overrideResponse })

export const getListVectorStoreFilesResponseOtherChunkingStrategyResponseParamMock = (overrideResponse: Partial<OtherChunkingStrategyResponseParam> = {}): OtherChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['other'] as const) }, ...overrideResponse })

export const getListVectorStoreFilesResponseMock = (overrideResponse: Partial< ListVectorStoreFilesResponse > = {}): ListVectorStoreFilesResponse => ({ object: faker.string.alpha(20), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.file'] as const), usage_bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), last_error: { code: faker.helpers.arrayElement(['server_error', 'unsupported_file', 'invalid_file'] as const), message: faker.string.alpha(20) }, chunking_strategy: faker.helpers.arrayElement([faker.helpers.arrayElement([{ ...getListVectorStoreFilesResponseStaticChunkingStrategyResponseParamMock() }, { ...getListVectorStoreFilesResponseOtherChunkingStrategyResponseParamMock() }]), undefined]) })), first_id: faker.string.alpha(20), last_id: faker.string.alpha(20), has_more: faker.datatype.boolean(), ...overrideResponse })

export const getCreateVectorStoreFileResponseStaticChunkingStrategyResponseParamMock = (overrideResponse: Partial<StaticChunkingStrategyResponseParam> = {}): StaticChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['static'] as const), static: { max_chunk_size_tokens: faker.number.int({ min: 100, max: 4096 }), chunk_overlap_tokens: faker.number.int({ min: undefined, max: undefined }) } }, ...overrideResponse })

export const getCreateVectorStoreFileResponseOtherChunkingStrategyResponseParamMock = (overrideResponse: Partial<OtherChunkingStrategyResponseParam> = {}): OtherChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['other'] as const) }, ...overrideResponse })

export const getCreateVectorStoreFileResponseMock = (overrideResponse: Partial< VectorStoreFileObject > = {}): VectorStoreFileObject => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.file'] as const), usage_bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), last_error: { code: faker.helpers.arrayElement(['server_error', 'unsupported_file', 'invalid_file'] as const), message: faker.string.alpha(20) }, chunking_strategy: faker.helpers.arrayElement([faker.helpers.arrayElement([{ ...getCreateVectorStoreFileResponseStaticChunkingStrategyResponseParamMock() }, { ...getCreateVectorStoreFileResponseOtherChunkingStrategyResponseParamMock() }]), undefined]), ...overrideResponse })

export const getGetVectorStoreFileResponseStaticChunkingStrategyResponseParamMock = (overrideResponse: Partial<StaticChunkingStrategyResponseParam> = {}): StaticChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['static'] as const), static: { max_chunk_size_tokens: faker.number.int({ min: 100, max: 4096 }), chunk_overlap_tokens: faker.number.int({ min: undefined, max: undefined }) } }, ...overrideResponse })

export const getGetVectorStoreFileResponseOtherChunkingStrategyResponseParamMock = (overrideResponse: Partial<OtherChunkingStrategyResponseParam> = {}): OtherChunkingStrategyResponseParam => ({ ...{ type: faker.helpers.arrayElement(['other'] as const) }, ...overrideResponse })

export const getGetVectorStoreFileResponseMock = (overrideResponse: Partial< VectorStoreFileObject > = {}): VectorStoreFileObject => ({ id: faker.string.alpha(20), object: faker.helpers.arrayElement(['vector_store.file'] as const), usage_bytes: faker.number.int({ min: undefined, max: undefined }), created_at: faker.number.int({ min: undefined, max: undefined }), vector_store_id: faker.string.alpha(20), status: faker.helpers.arrayElement(['in_progress', 'completed', 'cancelled', 'failed'] as const), last_error: { code: faker.helpers.arrayElement(['server_error', 'unsupported_file', 'invalid_file'] as const), message: faker.string.alpha(20) }, chunking_strategy: faker.helpers.arrayElement([faker.helpers.arrayElement([{ ...getGetVectorStoreFileResponseStaticChunkingStrategyResponseParamMock() }, { ...getGetVectorStoreFileResponseOtherChunkingStrategyResponseParamMock() }]), undefined]), ...overrideResponse })

export const getDeleteVectorStoreFileResponseMock = (overrideResponse: Partial< DeleteVectorStoreFileResponse > = {}): DeleteVectorStoreFileResponse => ({ id: faker.string.alpha(20), deleted: faker.datatype.boolean(), object: faker.helpers.arrayElement(['vector_store.file.deleted'] as const), ...overrideResponse })

export function getListVectorStoresMockHandler(overrideResponse?: ListVectorStoresResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListVectorStoresResponse> | ListVectorStoresResponse)) {
  return http.get('*/vector_stores', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListVectorStoresResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateVectorStoreMockHandler(overrideResponse?: VectorStoreObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VectorStoreObject> | VectorStoreObject)) {
  return http.post('*/vector_stores', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateVectorStoreResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetVectorStoreMockHandler(overrideResponse?: VectorStoreObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VectorStoreObject> | VectorStoreObject)) {
  return http.get('*/vector_stores/:vectorStoreId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetVectorStoreResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getModifyVectorStoreMockHandler(overrideResponse?: VectorStoreObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VectorStoreObject> | VectorStoreObject)) {
  return http.post('*/vector_stores/:vectorStoreId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getModifyVectorStoreResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteVectorStoreMockHandler(overrideResponse?: DeleteVectorStoreResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteVectorStoreResponse> | DeleteVectorStoreResponse)) {
  return http.delete('*/vector_stores/:vectorStoreId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteVectorStoreResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateVectorStoreFileBatchMockHandler(overrideResponse?: VectorStoreFileBatchObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VectorStoreFileBatchObject> | VectorStoreFileBatchObject)) {
  return http.post('*/vector_stores/:vectorStoreId/file_batches', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateVectorStoreFileBatchResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetVectorStoreFileBatchMockHandler(overrideResponse?: VectorStoreFileBatchObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VectorStoreFileBatchObject> | VectorStoreFileBatchObject)) {
  return http.get('*/vector_stores/:vectorStoreId/file_batches/:batchId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetVectorStoreFileBatchResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCancelVectorStoreFileBatchMockHandler(overrideResponse?: VectorStoreFileBatchObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VectorStoreFileBatchObject> | VectorStoreFileBatchObject)) {
  return http.post('*/vector_stores/:vectorStoreId/file_batches/:batchId/cancel', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCancelVectorStoreFileBatchResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getListFilesInVectorStoreBatchMockHandler(overrideResponse?: ListVectorStoreFilesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListVectorStoreFilesResponse> | ListVectorStoreFilesResponse)) {
  return http.get('*/vector_stores/:vectorStoreId/file_batches/:batchId/files', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListFilesInVectorStoreBatchResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getListVectorStoreFilesMockHandler(overrideResponse?: ListVectorStoreFilesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListVectorStoreFilesResponse> | ListVectorStoreFilesResponse)) {
  return http.get('*/vector_stores/:vectorStoreId/files', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getListVectorStoreFilesResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getCreateVectorStoreFileMockHandler(overrideResponse?: VectorStoreFileObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VectorStoreFileObject> | VectorStoreFileObject)) {
  return http.post('*/vector_stores/:vectorStoreId/files', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getCreateVectorStoreFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getGetVectorStoreFileMockHandler(overrideResponse?: VectorStoreFileObject | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VectorStoreFileObject> | VectorStoreFileObject)) {
  return http.get('*/vector_stores/:vectorStoreId/files/:fileId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getGetVectorStoreFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}

export function getDeleteVectorStoreFileMockHandler(overrideResponse?: DeleteVectorStoreFileResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteVectorStoreFileResponse> | DeleteVectorStoreFileResponse)) {
  return http.delete('*/vector_stores/:vectorStoreId/files/:fileId', async (info) => {
    await delay(1000)

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
      ? (typeof overrideResponse === 'function' ? await overrideResponse(info) : overrideResponse)
      : getDeleteVectorStoreFileResponseMock()), { status: 200, headers: { 'Content-Type': 'application/json' },
    })
  })
}
export function getVectorStoresMock() {
  return [
    getListVectorStoresMockHandler(),
    getCreateVectorStoreMockHandler(),
    getGetVectorStoreMockHandler(),
    getModifyVectorStoreMockHandler(),
    getDeleteVectorStoreMockHandler(),
    getCreateVectorStoreFileBatchMockHandler(),
    getGetVectorStoreFileBatchMockHandler(),
    getCancelVectorStoreFileBatchMockHandler(),
    getListFilesInVectorStoreBatchMockHandler(),
    getListVectorStoreFilesMockHandler(),
    getCreateVectorStoreFileMockHandler(),
    getGetVectorStoreFileMockHandler(),
    getDeleteVectorStoreFileMockHandler(),
  ]
}
