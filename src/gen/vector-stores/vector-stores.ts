/* eslint-disable ts/explicit-function-return-type */

import type {
  AxiosRequestConfig,
  AxiosResponse,
} from 'axios'
import type {
  CreateVectorStoreFileBatchRequest,
  CreateVectorStoreFileRequest,
  CreateVectorStoreRequest,
  DeleteVectorStoreFileResponse,
  DeleteVectorStoreResponse,
  ListFilesInVectorStoreBatchParams,
  ListVectorStoreFilesParams,
  ListVectorStoreFilesResponse,
  ListVectorStoresParams,
  ListVectorStoresResponse,
  UpdateVectorStoreRequest,
  VectorStoreFileBatchObject,
  VectorStoreFileObject,
  VectorStoreObject,
} from '.././models'
/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 * OpenAPI spec version: 2.3.0
 */
import axios from 'axios'

export function getVectorStores() {
/**
 * @summary Returns a list of vector stores.
 */
  const listVectorStores = <TData = AxiosResponse<ListVectorStoresResponse>>(
    params?: ListVectorStoresParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    )
  }
  /**
   * @summary Create a vector store.
   */
  const createVectorStore = <TData = AxiosResponse<VectorStoreObject>>(
    createVectorStoreRequest: CreateVectorStoreRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `http://localhost:3000/v1/vector_stores`,
      createVectorStoreRequest,
      options,
    )
  }
  /**
   * @summary Retrieves a vector store.
   */
  const getVectorStore = <TData = AxiosResponse<VectorStoreObject>>(
    vectorStoreId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}`,
      options,
    )
  }
  /**
   * @summary Modifies a vector store.
   */
  const modifyVectorStore = <TData = AxiosResponse<VectorStoreObject>>(
    vectorStoreId: string,
    updateVectorStoreRequest: UpdateVectorStoreRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}`,
      updateVectorStoreRequest,
      options,
    )
  }
  /**
   * @summary Delete a vector store.
   */
  const deleteVectorStore = <TData = AxiosResponse<DeleteVectorStoreResponse>>(
    vectorStoreId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.delete(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}`,
      options,
    )
  }
  /**
   * @summary Create a vector store file batch.
   */
  const createVectorStoreFileBatch = <TData = AxiosResponse<VectorStoreFileBatchObject>>(
    vectorStoreId: string,
    createVectorStoreFileBatchRequest: CreateVectorStoreFileBatchRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/file_batches`,
      createVectorStoreFileBatchRequest,
      options,
    )
  }
  /**
   * @summary Retrieves a vector store file batch.
   */
  const getVectorStoreFileBatch = <TData = AxiosResponse<VectorStoreFileBatchObject>>(
    vectorStoreId: string,
    batchId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/file_batches/${batchId}`,
      options,
    )
  }
  /**
   * @summary Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
   */
  const cancelVectorStoreFileBatch = <TData = AxiosResponse<VectorStoreFileBatchObject>>(
    vectorStoreId: string,
    batchId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`,
      undefined,
      options,
    )
  }
  /**
   * @summary Returns a list of vector store files in a batch.
   */
  const listFilesInVectorStoreBatch = <TData = AxiosResponse<ListVectorStoreFilesResponse>>(
    vectorStoreId: string,
    batchId: string,
    params?: ListFilesInVectorStoreBatchParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    )
  }
  /**
   * @summary Returns a list of vector store files.
   */
  const listVectorStoreFiles = <TData = AxiosResponse<ListVectorStoreFilesResponse>>(
    vectorStoreId: string,
    params?: ListVectorStoreFilesParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/files`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    )
  }
  /**
   * @summary Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
   */
  const createVectorStoreFile = <TData = AxiosResponse<VectorStoreFileObject>>(
    vectorStoreId: string,
    createVectorStoreFileRequest: CreateVectorStoreFileRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/files`,
      createVectorStoreFileRequest,
      options,
    )
  }
  /**
   * @summary Retrieves a vector store file.
   */
  const getVectorStoreFile = <TData = AxiosResponse<VectorStoreFileObject>>(
    vectorStoreId: string,
    fileId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/files/${fileId}`,
      options,
    )
  }
  /**
   * @summary Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
   */
  const deleteVectorStoreFile = <TData = AxiosResponse<DeleteVectorStoreFileResponse>>(
    vectorStoreId: string,
    fileId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.delete(
      `http://localhost:3000/v1/vector_stores/${vectorStoreId}/files/${fileId}`,
      options,
    )
  }
  return { listVectorStores, createVectorStore, getVectorStore, modifyVectorStore, deleteVectorStore, createVectorStoreFileBatch, getVectorStoreFileBatch, cancelVectorStoreFileBatch, listFilesInVectorStoreBatch, listVectorStoreFiles, createVectorStoreFile, getVectorStoreFile, deleteVectorStoreFile }
}
export type ListVectorStoresResult = AxiosResponse<ListVectorStoresResponse>
export type CreateVectorStoreResult = AxiosResponse<VectorStoreObject>
export type GetVectorStoreResult = AxiosResponse<VectorStoreObject>
export type ModifyVectorStoreResult = AxiosResponse<VectorStoreObject>
export type DeleteVectorStoreResult = AxiosResponse<DeleteVectorStoreResponse>
export type CreateVectorStoreFileBatchResult = AxiosResponse<VectorStoreFileBatchObject>
export type GetVectorStoreFileBatchResult = AxiosResponse<VectorStoreFileBatchObject>
export type CancelVectorStoreFileBatchResult = AxiosResponse<VectorStoreFileBatchObject>
export type ListFilesInVectorStoreBatchResult = AxiosResponse<ListVectorStoreFilesResponse>
export type ListVectorStoreFilesResult = AxiosResponse<ListVectorStoreFilesResponse>
export type CreateVectorStoreFileResult = AxiosResponse<VectorStoreFileObject>
export type GetVectorStoreFileResult = AxiosResponse<VectorStoreFileObject>
export type DeleteVectorStoreFileResult = AxiosResponse<DeleteVectorStoreFileResponse>
